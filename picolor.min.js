var picolor;
(function(k) {
  k.lightSpectrum = [chroma.hex(chroma.brewer.Paired[0]), chroma.hex(chroma.brewer.Paired[2]), chroma.hex(chroma.brewer.Paired[10]), chroma.hex(chroma.brewer.Paired[6]), chroma.hex(chroma.brewer.Paired[4]), chroma.hex(chroma.brewer.Paired[8])];
  k.darkSpectrum = [chroma.hex(chroma.brewer.Paired[1]), chroma.hex(chroma.brewer.Paired[3]), chroma.hex(chroma.brewer.Paired[11]), chroma.hex(chroma.brewer.Paired[7]), chroma.hex(chroma.brewer.Paired[5]), chroma.hex(chroma.brewer.Paired[9])];
  k.whiteToBlackInterpolator = chroma.interpolate.bezier(["white", "black"]);
  var q = function() {
    function c(a, b) {
      var s = this;
      this._lch = k.whiteToBlackInterpolator(0.4).lch();
      this._alpha = 255;
      this._showBasicSelector = !0;
      this._showLabels = this._showColorWheel = !1;
      this.height = this.width = 298;
      this.cx = this.width / 2;
      this.cy = this.height / 2;
      this.radius = 119;
      b && this.setOptions(b);
      this.containerDivID = a;
      this.colorBandDivID = this.containerDivID + "-colorband";
      this.blackToWhiteBandDivID = this.containerDivID + "-blacktowhiteband";
      this.colorWheelDivID = this.containerDivID + "-colorwheel";
      var c = '<div class="picolor-container">\t<div class="picolor-top-container">\t\t<div id="' + this.colorBandDivID + '-0"></div>\t\t<div id="' + this.colorBandDivID + '-1"></div>\t\t<div id="' + this.blackToWhiteBandDivID + '" style="margin-top: 6px"></div>\t</div>\t<div class="picolor-bottom-container">\t\t<canvas id="' + this.colorWheelDivID + '" class="picolor-wheel"></canvas>\t</div></div>', w = $("#" + this.containerDivID);
      w.empty();
      w.append(c);
      $("#" + this.colorWheelDivID).mouseleave(this.setWheelDragStateOff.bind(this));
      $("#" + this.colorWheelDivID).mouseup(this.setWheelDragStateOff.bind(this));
      $("#" + this.colorWheelDivID).mousedown(function(a) {
        s.setWheelDragStateOn(a);
        s.setWheelColor(a);
      });
      $("#" + this.colorWheelDivID).mousemove(this.setWheelColor.bind(this));
    }
    c.prototype.setOptions = function(a) {
      a.color && (this._lch = a.color.lch(), this._alpha = a.color.alpha());
      this._showColorWheel = !!a.showColorWheel;
      this._showLabels = !!a.showLabels;
      this._showBasicSelector = !!a.showColorWheel;
    };
    c.prototype.setWheelDragStateOn = function(a) {
      var b = a.pageX - this.offset.left;
      a = a.pageY - this.offset.top;
      var s = b - this.cx, c = a - this.cy;
      Math.sqrt(s * s + c * c) < this.radius && (this.isDraggingColor = !0);
      30 <= a && a <= this.height - 30 && -2 <= b && 24 >= b && (this.isDraggingLightness = !0);
      30 <= a && a <= this.height - 30 && b >= this.width - 25 && b <= this.width + 1 && (this.isDraggingAlpha = !0);
    };
    c.prototype.setWheelColor = function(a) {
      if (this.isDraggingAlpha || this.isDraggingColor || this.isDraggingLightness) {
        var b = a.pageX - this.offset.left;
        a = a.pageY - this.offset.top;
        if (this.isDraggingColor) {
          var c = b - this.cx, m = a - this.cy, b = Math.min(this.radius, Math.sqrt(c * c + m * m)), c = 180 * Math.atan2(m, c) / Math.PI;
          this.lch = [this.lch[0], 100 * b / this.radius, c];
        }
        this.isDraggingLightness && (this.lch = [Math.max(0, Math.min(100, 100 - (a - 30) / (this.height - 60) * 100)), this.lch[1], this.lch[2]]);
        this.isDraggingAlpha && (this.alpha = Math.max(0, Math.min(255, 255 - 255 * (a - 30) / (this.height - 60))));
      }
    };
    c.prototype.setWheelDragStateOff = function(a) {
      this.isDraggingLightness = this.isDraggingColor = this.isDraggingAlpha = !1;
    };
    Object.defineProperty(c.prototype, "lch", {get:function() {
      return this._lch;
    }, set:function(a) {
      0 > a[2] && (a[2] += 360);
      360 <= a[2] && (a[2] -= 360);
      this._lch = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(c.prototype, "alpha", {get:function() {
      return this._alpha;
    }, set:function(a) {
      this._alpha = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    c.prototype.getColor = function() {
      return chroma.lch(this.lch[0], this.lch[1], this.lch[2]);
    };
    Object.defineProperty(c.prototype, "showColorWheel", {get:function() {
      return this._showColorWheel;
    }, set:function(a) {
      this._showColorWheel = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(c.prototype, "showLabels", {get:function() {
      return this._showLabels;
    }, set:function(a) {
      this._showLabels = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(c.prototype, "showBasicSelector", {get:function() {
      return this._showBasicSelector;
    }, set:function(a) {
      this._showBasicSelector = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    c.prototype.draw = function() {
      $("#" + this.containerDivID).off("click");
      this.showBasicSelector && this.drawBasicSelector();
      this.showColorWheel && this.drawColorWheel();
    };
    c.prototype.drawBasicSelector = function() {
      for (var a = this, b = function(b, c) {
        for (var d = "", f = 0;f < b.length;f++) {
          var g = c + "-" + f, d = d + ('<div id="' + g + '" class="picolor-box-container');
          a.getColor().css() === b[f].css() && (d += " picolor-box-container-selected");
          d += '">';
          d += '\t<div class="picolor-box" style="background-color:' + b[f].css() + '"></div>';
          d += "</div>";
          $("#" + a.containerDivID).on("click", "#" + g, b[f].lch(), function(b) {
            a.lch = b.data;
          });
        }
        $("#" + c).empty();
        $("#" + c).append(d);
      }, c = [], m = 0;6 > m;m++) {
        c.push(k.whiteToBlackInterpolator(0.2 * m));
      }
      b(k.lightSpectrum, this.colorBandDivID + "-0");
      b(k.darkSpectrum, this.colorBandDivID + "-1");
      b(c, this.blackToWhiteBandDivID);
    };
    c.prototype.drawColorWheel = function() {
      this.offset = $("#" + this.colorWheelDivID).offset();
      var a = document.getElementById(this.colorWheelDivID), b = a.getContext("2d"), c, m, k = Number.MAX_VALUE;
      a.width = this.width;
      a.height = this.height;
      for (var a = b.createImageData(this.width, this.height), l = a.data, d = 0, f = 0;f < this.height;f++) {
        for (var g = 0;g < this.width;g++, d += 4) {
          var h = g - this.cx, e = f - this.cy, q = Math.sqrt(h * h + e * e);
          if (q < this.radius + 0.5) {
            e = 180 * Math.atan2(e, h) / Math.PI;
            0 > e && (e += 360);
            360 < e && (e -= 360);
            var r = 100 * q / this.radius, h = chroma.lch2rgb(this.lch[0], r, e), e = Math.sqrt(Math.pow(r - this.lch[1], 2) + Math.pow(e - this.lch[2], 2));
            e < k && (k = e, c = g, m = f);
            var e = this.alpha, r = h[0], u = h[1], v = h[2], n = 0 == Math.floor(g / 5) % 2, p = 0 == Math.floor(f / 5) % 2, t = n && !p || !n && p ? 250 : 200, p = n = t;
            l[d] = r * e / 255 + n * (1 - e / 255);
            l[d + 1] = u * e / 255 + p * (1 - e / 255);
            l[d + 2] = v * e / 255 + t * (1 - e / 255);
            l[d + 3] = 255 * Math.max(0, this.radius - q);
          }
        }
      }
      for (f = d = 0;f < this.height;f++) {
        for (g = 0;g < this.width;g++, d += 4) {
          30 > f || f > this.height - 30 || 2 > g || 15 < g || (h = chroma.lch2rgb(100 - 100 * (f - 30) / (this.height - 60), this.lch[1], this.lch[2]), l[d] = h[0], l[d + 1] = h[1], l[d + 2] = h[2], l[d + 3] = 255);
        }
      }
      d = 0;
      h = chroma.lch2rgb(this.lch[0], this.lch[1], this.lch[2]);
      for (f = 0;f < this.height;f++) {
        for (g = 0;g < this.width;g++, d += 4) {
          30 > f || f > this.height - 30 || g < this.width - 16 || g > this.width - 3 || (e = 255 - 255 * (f - 30) / (this.height - 60), r = h[0], u = h[1], v = h[2], n = 0 == Math.floor(g / 5) % 2, p = 0 == Math.floor(f / 5) % 2, p = n = t = n && !p || !n && p ? 250 : 200, l[d] = r * e / 255 + n * (1 - e / 255), l[d + 1] = u * e / 255 + p * (1 - e / 255), l[d + 2] = v * e / 255 + t * (1 - e / 255), l[d + 3] = 255);
        }
      }
      b.putImageData(a, 0, 0);
      b.beginPath();
      b.lineWidth = 2;
      b.strokeStyle = 50 < this.lch[0] ? "#0f0f0f" : "#efefef";
      b.arc(c, m, 3, 0, 2 * Math.PI, !1);
      b.stroke();
      b.beginPath();
      c = Math.min(this.height - 35, 30 + (100 - this.lch[0]) / 100 * (this.height - 60));
      b.rect(1, c, 16, 5);
      b.stroke();
      b.beginPath();
      128 > this.alpha && (b.strokeStyle = "#0f0f0f");
      c = Math.min(this.height - 35, 30 + (1 - this.alpha / 255) * (this.height - 60));
      b.rect(this.width - 17, c, 16, 5);
      b.stroke();
      this.showLabels && (b.fillStyle = "#818181", b.font = "10px sans-serif", b.fillText("Dark", 20, this.height - 30), b.textBaseline = "top", b.fillText("Light", 20, 30), b.textAlign = "end", b.fillText("Opaque", this.width - 21, 30), b.textBaseline = "bottom", b.fillText("Transparent", this.width - 21, this.height - 30));
    };
    return c;
  }();
  k.SingleColor = q;
  q = function() {
    return function(c) {
      this.containerDivID = c;
    };
  }();
  k.Palette = q;
})(picolor || (picolor = {}));


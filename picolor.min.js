var picolor;
(function(l) {
  l.lightSpectrum = [chroma.hex(chroma.brewer.Paired[0]), chroma.hex(chroma.brewer.Paired[2]), chroma.hex(chroma.brewer.Paired[10]), chroma.hex(chroma.brewer.Paired[6]), chroma.hex(chroma.brewer.Paired[4]), chroma.hex(chroma.brewer.Paired[8])];
  l.darkSpectrum = [chroma.hex(chroma.brewer.Paired[1]), chroma.hex(chroma.brewer.Paired[3]), chroma.hex(chroma.brewer.Paired[11]), chroma.hex(chroma.brewer.Paired[7]), chroma.hex(chroma.brewer.Paired[5]), chroma.hex(chroma.brewer.Paired[9])];
  l.whiteToBlackInterpolator = chroma.scale(["white", "black"]).correctLightness(!0);
  var t = function() {
    function b(a, g) {
      this._lch = l.whiteToBlackInterpolator(0.4).lch();
      this._alpha = 1;
      g && this.setOptions(g);
      this.containerDivID = a;
      this.colorBandDivID = this.containerDivID + "-colorband";
      this.blackToWhiteBandDivID = this.containerDivID + "-blacktowhiteband";
      var c = '<div>\t<div id="' + this.colorBandDivID + '-0"></div>\t<div id="' + this.colorBandDivID + '-1"></div>\t<div id="' + this.blackToWhiteBandDivID + '" style="margin-top: 6px"></div></div>', d = $("#" + this.containerDivID);
      d.empty();
      d.append(c);
    }
    b.prototype.setOptions = function(a) {
      a.color && (this._lch = a.color.lch(), this._alpha = a.color.alpha());
    };
    Object.defineProperty(b.prototype, "lch", {get:function() {
      return this._lch;
    }, set:function(a) {
      0 > a[2] && (a[2] += 360);
      360 <= a[2] && (a[2] -= 360);
      this._lch = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "hex", {get:function() {
      return chroma.lch(this.lch[0], this.lch[1], this.lch[2]).hex();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "color", {get:function() {
      var a = chroma.lch(this.lch[0], this.lch[1], this.lch[2]);
      a.alpha(this._alpha);
      return a;
    }, set:function(a) {
      this._lch = a.lch();
      this._alpha = a.alpha();
      this.draw();
    }, enumerable:!0, configurable:!0});
    b.prototype.draw = function() {
      var a = this;
      $("#" + this.containerDivID).off("click");
      for (var g = function(a, g) {
        var c = a.rgb(), d = g.rgb(), f = c[0] - d[0], b = c[1] - d[1], c = c[2] - d[2];
        return Math.sqrt(f * f + b * b + c * c);
      }, c = function(c, d) {
        for (var e = "", f = 0;f < c.length;f++) {
          var b = d + "-" + f, e = e + ('<div id="' + b + '" style="width: 38px;height: 24px;cursor: pointer;display: inline-block;padding: 1px;background-color: #E0E0E0;margin: 0px 4px 0px 4px;'), e = 1 > g(a.color, c[f]) ? e + " border: 2px solid black;" : e + " border: 2px solid #E0E0E0;", e = e + '">', e = e + ('\t<div style="height: 24px; background-color:' + c[f].css() + '"></div>'), e = e + "</div>";
          $("#" + a.containerDivID).on("click", "#" + b, c[f], function(c) {
            a.lch = c.data.lch();
            $("#" + a.containerDivID).trigger("oncolorchange", [a.color]);
          });
        }
        $("#" + d).empty();
        $("#" + d).append(e);
      }, d = [], f = 0;6 > f;f++) {
        d.push(l.whiteToBlackInterpolator(0.2 * f));
      }
      c(l.lightSpectrum, this.colorBandDivID + "-0");
      c(l.darkSpectrum, this.colorBandDivID + "-1");
      c(d, this.blackToWhiteBandDivID);
    };
    return b;
  }();
  l.BasicPicker = t;
})(picolor || (picolor = {}));
(function(l) {
  var t = function() {
    function b(a, g) {
      this.containerDivID = a;
      this._categoryCount = 3;
      this._alpha = 1;
      this.blueRange = [chroma.hex("#deebf7"), chroma.hex("#08306b")];
      this.orangeRange = [chroma.hex("#fee6ce"), chroma.hex("#7f2704")];
      this.greenRange = [chroma.hex("#e5f5e0"), chroma.hex("#00441b")];
      this.grayRange = [chroma.hex("#d9d9d9"), chroma.hex("#000000")];
      this.brownWhiteRange = [chroma.hex("#543005"), chroma.hex("#f5f5f5")];
      this.whiteSeagreenRange = [chroma.hex("#f5f5f5"), chroma.hex("#003c30")];
      this.redYellowRange = [chroma.hex("#a50026"), chroma.hex("#ffffbf")];
      this.yellowPurpleRange = [chroma.hex("#ffffbf"), chroma.hex("#313695")];
      this.qualitativePaletteCount = 1;
      this.brewerPairedRanges = [[chroma.hex(chroma.brewer.Paired[0]), chroma.hex(chroma.brewer.Paired[1])], [chroma.hex(chroma.brewer.Paired[2]), chroma.hex(chroma.brewer.Paired[3])], [chroma.hex(chroma.brewer.Paired[4]), chroma.hex(chroma.brewer.Paired[5])], [chroma.hex(chroma.brewer.Paired[6]), chroma.hex(chroma.brewer.Paired[7])], [chroma.hex(chroma.brewer.Paired[8]), chroma.hex(chroma.brewer.Paired[9])], [chroma.hex(chroma.brewer.Paired[10]), chroma.hex(chroma.brewer.Paired[11])]];
      this.pad = this.margin = 10;
      this.w = this.h = 33;
      this.selectedPalIdx = 0;
      this.isDraggingLightness = !1;
      this.containerDivID = a;
      this.paletteCanvasDivID = this.containerDivID + "-canvas";
      g && this.setOptions(g);
      var c = '<div style="background-color: #E0E0E0; padding 5px; cursor: pointer;">\t<canvas id="' + this.paletteCanvasDivID + '"></canvas></div>', d = $("#" + this.containerDivID);
      d.empty();
      d.append(c);
      $("#" + this.paletteCanvasDivID).click(this.setPalette.bind(this));
    }
    Object.defineProperty(b.prototype, "alpha", {get:function() {
      return this._alpha;
    }, set:function(a) {
      this._alpha = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    b.prototype.generateScale = function(a) {
      return chroma.scale([a[0].hex(), a[1].hex()]).correctLightness(!0);
    };
    Object.defineProperty(b.prototype, "sequentialPalettes", {get:function() {
      var a = this.generateScale(this.blueRange), g = this.generateScale(this.orangeRange), c = this.generateScale(this.greenRange);
      return[this.generateScale(this.grayRange), a, c, g];
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "divergentPalettes", {get:function() {
      chroma.scale([this.brownWhiteRange[0].hex(), this.brownWhiteRange[1].hex()]).correctLightness(!0);
      chroma.scale([this.whiteSeagreenRange[0].hex(), this.whiteSeagreenRange[1].hex()]).correctLightness(!0);
      chroma.scale([this.redYellowRange[0].hex(), this.redYellowRange[1].hex()]).correctLightness(!0);
      chroma.scale([this.yellowPurpleRange[0].hex(), this.yellowPurpleRange[1].hex()]).correctLightness(!0);
      return[[this.generateScale(this.brownWhiteRange), this.generateScale(this.whiteSeagreenRange)], [this.generateScale(this.redYellowRange), this.generateScale(this.yellowPurpleRange)]];
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "brewerPairedScales", {get:function() {
      for (var a = [], g = 0;g < this.brewerPairedRanges.length;g++) {
        var c = this.generateScale(this.brewerPairedRanges[g]);
        a.push(c);
      }
      return a;
    }, enumerable:!0, configurable:!0});
    b.prototype.setPalette = function(a) {
      var g = this.sequentialPalettes.length + this.divergentPalettes.length + this.qualitativePaletteCount;
      this.selectedPalIdx = Math.floor((a.pageX - this.offset.left) / ((2 * this.margin + this.w * g + this.pad * (g - 1)) / g));
      $("#" + this.containerDivID).trigger("oncolorchange", [this.palette]);
      this.draw();
    };
    b.prototype.setOptions = function(a) {
      a.categoryCount && 1 < a.categoryCount && (this._categoryCount = a.categoryCount);
    };
    Object.defineProperty(b.prototype, "palette", {get:function() {
      for (var a = [], g = this.paletteMatrix()[this.selectedPalIdx], c = 0;c < g.length;c++) {
        a.push(g[c]);
      }
      return a;
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "categoryCount", {get:function() {
      return this._categoryCount;
    }, set:function(a) {
      this._categoryCount = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    b.prototype.paletteMatrix = function() {
      for (var a = [], g = this.categoryCount, c = 0;c < this.sequentialPalettes.length;c++) {
        for (var d = [], f = this.sequentialPalettes[c], h = 0;h < g;h++) {
          var b = h / (g - 1);
          d.push(f(b));
        }
        a.push(d);
      }
      for (c = 0;c < this.divergentPalettes.length;c++) {
        for (var d = [], f = this.divergentPalettes[c][0], e = this.divergentPalettes[c][1], h = 0;h < g;h++) {
          b = h / (g - 1), b = 0.5 >= b ? f(2 * b) : e(2 * (b - 0.5)), d.push(b);
        }
        a.push(d);
      }
      d = [];
      b = 2;
      2 * this.brewerPairedScales.length < g && (b = Math.ceil(g / this.brewerPairedScales.length));
      for (c = 0;c < this.brewerPairedScales.length && d.length < g;c++) {
        for (f = this.brewerPairedScales[c], h = 0;h < b && d.length < g;h++) {
          d.push(f(h / (b - 1)));
        }
      }
      a.push(d);
      return a;
    };
    b.prototype.drawCheckerboxAndTransparencySlider = function(a, g, c) {
      for (var d = g.createImageData(a.width, a.height), f = d.data, b = 0, k = 0;k < a.height;k++) {
        for (var e = 0;e < a.width;e++, b += 4) {
          if (!(k < this.margin || k > a.height - this.margin - 0 - 1 || e < this.margin || e > a.width - this.margin - 1 || (e - this.margin) % (this.w + this.pad) >= this.w)) {
            var l = 0 == Math.floor(e / 5) % 2, n = 0 == Math.floor(k / 5) % 2, q = l && !n || !l && n ? 250 : 200;
            f[b] = q;
            f[b + 1] = q;
            f[b + 2] = q;
            f[b + 3] = 255;
          }
        }
      }
      for (k = b = 0;k < a.height;k++) {
        for (e = 0;e < a.width;e++, b += 4) {
          if (!(k < a.height - this.margin - 14 || k > a.height - this.margin - 1 || e < this.margin || e > a.width - this.margin - 1)) {
            var l = 0 == Math.floor(e / 5) % 2, n = 0 == Math.floor(k / 5) % 2, n = l = q = l && !n || !l && n ? 250 : 200, r = c[this.selectedPalIdx][this.categoryCount - 1].rgb(), m = 1 - (e - this.margin) / (a.width - 2 * this.margin), p = r[1], s = r[2];
            f[b] = r[0] * m + l * (1 - m);
            f[b + 1] = p * m + n * (1 - m);
            f[b + 2] = s * m + q * (1 - m);
            f[b + 3] = 255;
          }
        }
      }
      g.putImageData(d, 0, 0);
    };
    b.prototype.drawPalettes = function(a, g) {
      a.globalAlpha = this.alpha;
      for (var c = 0;c < g.length;c++) {
        for (var d = g[c], b = 0;b < d.length;b++) {
          a.fillStyle = d[b].css(), a.fillRect(this.margin + c * (this.w + this.pad), this.margin + b * this.h, this.w, this.h);
        }
      }
    };
    b.prototype.drawPaletteSelection = function(a) {
      a.globalAlpha = 1;
      a.strokeStyle = "black";
      a.lineWidth = 1.5;
      a.strokeRect(this.margin - 2 + this.selectedPalIdx * (this.w + this.pad), this.margin - 2, this.w + 4, this.h * this.categoryCount + 4);
    };
    b.prototype.drawTransparencySelection = function(a) {
    };
    b.prototype.drawLightnessSelection = function(a) {
    };
    b.prototype.draw = function() {
      this.offset = $("#" + this.paletteCanvasDivID).offset();
      var a = document.getElementById(this.paletteCanvasDivID), g = a.getContext("2d"), c = this.categoryCount, b = this.sequentialPalettes.length + this.divergentPalettes.length + this.qualitativePaletteCount;
      a.width = 2 * this.margin + this.w * b + this.pad * (b - 1);
      a.height = 2 * this.margin + this.h * c + 0;
      a = this.paletteMatrix();
      this.drawPalettes(g, a);
      this.drawPaletteSelection(g);
      this.drawTransparencySelection(g);
      this.drawLightnessSelection(g);
    };
    return b;
  }();
  l.Palette = t;
})(picolor || (picolor = {}));
(function(l) {
  var t = function() {
    function b(a, g) {
      var c = this;
      this._lch = l.whiteToBlackInterpolator(0.4).lch();
      this._alpha = 1;
      this.height = this.width = 298;
      this.radius = 119;
      this.cx = this.width / 2;
      this.cy = this.height / 2;
      g && this.setOptions(g);
      this.containerDivID = a;
      this.colorWheelDivID = this.containerDivID + "-colorwheel";
      var b = '<div style="background-color: #E0E0E0; padding 5px">\t<canvas id="' + this.colorWheelDivID + '"></canvas></div>', f = $("#" + this.containerDivID);
      f.empty();
      f.append(b);
      b = document.getElementById(this.colorWheelDivID);
      b.width = this.width;
      b.height = this.height;
      this.imageDataCache = b.getContext("2d").createImageData(this.width, this.height);
      $("#" + this.colorWheelDivID).mouseleave(this.setWheelDragStateOff.bind(this));
      $("#" + this.colorWheelDivID).mouseup(this.setWheelDragStateOff.bind(this));
      $("#" + this.colorWheelDivID).mousedown(function(a) {
        c.setWheelDragStateOn(a);
        c.setWheelColor(a);
      });
      $("#" + this.colorWheelDivID).mousemove(function(a) {
        c.setCursor(a);
        c.setWheelColor(a);
      });
    }
    b.prototype.setOptions = function(a) {
      a.color && (this._lch = a.color.lch(), this._alpha = a.color.alpha());
    };
    b.prototype.setWheelDragStateOn = function(a) {
      var b = a.pageX - this.offset.left;
      a = a.pageY - this.offset.top;
      var c = b - this.cx, d = a - this.cy;
      Math.sqrt(c * c + d * d) < this.radius && (this.isDraggingColor = !0);
      30 <= a && a <= this.height - 30 && 0 <= b && 18 >= b && (this.isDraggingLightness = !0);
      30 <= a && a <= this.height - 30 && b >= this.width - 19 && b <= this.width && (this.isDraggingAlpha = !0);
    };
    b.prototype.setCursor = function(a) {
      if (!(this.isDraggingAlpha || this.isDraggingColor || this.isDraggingLightness)) {
        var b = a.pageX - this.offset.left;
        a = a.pageY - this.offset.top;
        var c = b - this.cx, d = a - this.cy;
        Math.sqrt(c * c + d * d) < this.radius ? $("#" + this.colorWheelDivID).css("cursor", "crosshair") : 30 <= a && a <= this.height - 30 && 0 <= b && 18 >= b ? $("#" + this.colorWheelDivID).css("cursor", "s-resize") : 30 <= a && a <= this.height - 30 && b >= this.width - 19 && b <= this.width ? $("#" + this.colorWheelDivID).css("cursor", "s-resize") : $("#" + this.colorWheelDivID).css("cursor", "default");
      }
    };
    b.prototype.setWheelColor = function(a) {
      if (this.isDraggingAlpha || this.isDraggingColor || this.isDraggingLightness) {
        var b = a.pageX - this.offset.left;
        a = a.pageY - this.offset.top;
        if (this.isDraggingColor) {
          var c = b - this.cx, d = a - this.cy, f = Math.sqrt(c * c + d * d);
          this.picked_x = b;
          this.picked_y = a;
          if (f > this.radius) {
            var f = this.radius, b = this.radius * d / Math.sqrt(c * c + d * d), h = this.radius * c / Math.sqrt(c * c + d * d);
            this.picked_y = b + this.cy;
            this.picked_x = h + this.cx;
          }
          c = 180 * Math.atan2(d, c) / Math.PI;
          this.lch = [this.lch[0], 100 * f / this.radius, c];
        }
        this.isDraggingLightness && (this.lch = [Math.max(0, Math.min(100, 100 - (a - 30) / (this.height - 60) * 100)), this.lch[1], this.lch[2]]);
        this.isDraggingAlpha && (this.alpha = Math.max(0, Math.min(1, 1 - (a - 30) / (this.height - 60))));
        $("#" + this.containerDivID).trigger("oncolorchange", [this.color]);
      }
    };
    b.prototype.setWheelDragStateOff = function(a) {
      this.isDraggingLightness = this.isDraggingColor = this.isDraggingAlpha = !1;
    };
    Object.defineProperty(b.prototype, "lch", {get:function() {
      return this._lch;
    }, set:function(a) {
      0 > a[2] && (a[2] += 360);
      360 <= a[2] && (a[2] -= 360);
      var b = this._lch[0] != a[0];
      this._lch = a;
      this.draw(b);
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "hex", {get:function() {
      return chroma.lch(this.lch[0], this.lch[1], this.lch[2]).hex();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "alpha", {get:function() {
      return this._alpha;
    }, set:function(a) {
      this._alpha = a;
      this.draw(!0);
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "color", {get:function() {
      var a = chroma.lch(this.lch[0], this.lch[1], this.lch[2]);
      a.alpha(this._alpha);
      return a;
    }, set:function(a) {
      var b = a.lch();
      a = a.alpha();
      var c = this._lch[0] != b[0] || this._alpha != a;
      this._lch = b;
      this._alpha = a;
      this.draw(c);
    }, enumerable:!0, configurable:!0});
    b.prototype.draw = function(a) {
      "undefined" === typeof a && (a = !0);
      this.offset = $("#" + this.colorWheelDivID).offset();
      var b = document.getElementById(this.colorWheelDivID).getContext("2d"), c = Number.MAX_VALUE, d = this.imageDataCache.data;
      if (a) {
        for (var f = a = 0;f < this.height;f++) {
          for (var h = 0;h < this.width;h++, a += 4) {
            var k = h - this.cx, e = f - this.cy, l = Math.sqrt(k * k + e * e);
            if (l < this.radius + 0.5) {
              e = 180 * Math.atan2(e, k) / Math.PI;
              0 > e && (e += 360);
              360 < e && (e -= 360);
              var n = 100 * l / this.radius, k = chroma.lch2rgb(this.lch[0], n, e), e = Math.sqrt(Math.pow(n - this.lch[1], 2) + Math.pow(e - this.lch[2], 2));
              e < c && (c = e, this.picked_x = h, this.picked_y = f);
              var e = this.alpha, n = k[0], q = k[1], r = k[2], m = 0 == Math.floor(h / 5) % 2, p = 0 == Math.floor(f / 5) % 2, s = m && !p || !m && p ? 250 : 200, p = m = s;
              d[a] = n * e + m * (1 - e);
              d[a + 1] = q * e + p * (1 - e);
              d[a + 2] = r * e + s * (1 - e);
              d[a + 3] = 255 * Math.max(0, this.radius - l);
            }
          }
        }
      }
      for (f = a = 0;f < this.height;f++) {
        for (h = 0;h < this.width;h++, a += 4) {
          30 > f || f > this.height - 30 || 2 > h || 15 < h || (k = chroma.lch2rgb(100 - 100 * (f - 30) / (this.height - 60), this.lch[1], this.lch[2]), d[a] = k[0], d[a + 1] = k[1], d[a + 2] = k[2], d[a + 3] = 255);
        }
      }
      a = 0;
      k = chroma.lch2rgb(this.lch[0], this.lch[1], this.lch[2]);
      for (f = 0;f < this.height;f++) {
        for (h = 0;h < this.width;h++, a += 4) {
          30 > f || f > this.height - 30 || h < this.width - 16 || h > this.width - 3 || (e = 1 - (f - 30) / (this.height - 60), n = k[0], q = k[1], r = k[2], m = 0 == Math.floor(h / 5) % 2, p = 0 == Math.floor(f / 5) % 2, p = m = s = m && !p || !m && p ? 250 : 200, d[a] = n * e + m * (1 - e), d[a + 1] = q * e + p * (1 - e), d[a + 2] = r * e + s * (1 - e), d[a + 3] = 255);
        }
      }
      b.putImageData(this.imageDataCache, 0, 0);
      b.beginPath();
      b.lineWidth = 1.5;
      b.strokeStyle = 50 < this.lch[0] ? "#2f2f2f" : "#dfdfdf";
      c = 30 + (100 - this.lch[0]) / 100 * (this.height - 60);
      c = Math.max(37, Math.min(this.height - 30 - 6, c));
      b.arc(9, c, 5, 0, 2 * Math.PI, !1);
      b.stroke();
      b.beginPath();
      0.5 > this.alpha && (b.strokeStyle = "#2f2f2f");
      b.arc(this.picked_x, this.picked_y, 6, 0, 2 * Math.PI, !1);
      b.stroke();
      b.beginPath();
      c = Math.min(this.height - 35, 30 + (1 - this.alpha) * (this.height - 60));
      c = Math.max(37, Math.min(this.height - 30 - 6, c));
      b.arc(this.width - 9, c, 5, 0, 2 * Math.PI, !1);
      b.stroke();
    };
    return b;
  }();
  l.ColorWheel = t;
})(picolor || (picolor = {}));


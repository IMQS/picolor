var picolor;
(function(n) {
  n.lightSpectrum = [chroma.hex(chroma.brewer.Paired[0]), chroma.hex(chroma.brewer.Paired[2]), chroma.hex(chroma.brewer.Paired[10]), chroma.hex(chroma.brewer.Paired[6]), chroma.hex(chroma.brewer.Paired[4]), chroma.hex(chroma.brewer.Paired[8])];
  n.darkSpectrum = [chroma.hex(chroma.brewer.Paired[1]), chroma.hex(chroma.brewer.Paired[3]), chroma.hex(chroma.brewer.Paired[11]), chroma.hex(chroma.brewer.Paired[7]), chroma.hex(chroma.brewer.Paired[5]), chroma.hex(chroma.brewer.Paired[9])];
  n.whiteToBlackInterpolator = chroma.scale(["white", "black"]).correctLightness(!0);
  var q = function() {
    function b(a, f) {
      this._lch = n.whiteToBlackInterpolator(0.4).lch();
      this._alpha = 1;
      f && this.setOptions(f);
      this.containerDivID = a;
      this.colorBandDivID = this.containerDivID + "-colorband";
      this.blackToWhiteBandDivID = this.containerDivID + "-blacktowhiteband";
      var c = '<div>\t<div id="' + this.colorBandDivID + '-0"></div>\t<div id="' + this.colorBandDivID + '-1"></div>\t<div id="' + this.blackToWhiteBandDivID + '" style="margin-top: 6px"></div></div>', h = $("#" + this.containerDivID);
      h.empty();
      h.append(c);
    }
    b.prototype.setOptions = function(a) {
      a.color && (this._lch = a.color.lch(), this._alpha = a.color.alpha());
    };
    Object.defineProperty(b.prototype, "lch", {get:function() {
      return this._lch;
    }, set:function(a) {
      0 > a[2] && (a[2] += 360);
      360 <= a[2] && (a[2] -= 360);
      this._lch = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "hex", {get:function() {
      return chroma.lch(this.lch[0], this.lch[1], this.lch[2]).hex();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "color", {get:function() {
      var a = chroma.lch(this.lch[0], this.lch[1], this.lch[2]);
      a.alpha(this._alpha);
      return a;
    }, set:function(a) {
      this._lch = a.lch();
      this._alpha = a.alpha();
      this.draw();
    }, enumerable:!0, configurable:!0});
    b.prototype.draw = function() {
      var a = this;
      $("#" + this.containerDivID).off("click");
      for (var f = function(a, f) {
        var c = a.rgb(), h = f.rgb(), b = c[0] - h[0], e = c[1] - h[1], c = c[2] - h[2];
        return Math.sqrt(b * b + e * e + c * c);
      }, c = function(c, h) {
        for (var b = "", k = 0;k < c.length;k++) {
          var m = h + "-" + k, b = b + ('<div id="' + m + '" style="width: 38px;height: 24px;cursor: pointer;display: inline-block;padding: 1px;background-color: #E0E0E0;margin: 0px 4px 0px 4px;'), b = 1 > f(a.color, c[k]) ? b + " border: 2px solid black;" : b + " border: 2px solid #E0E0E0;", b = b + '">', b = b + ('\t<div style="height: 24px; background-color:' + c[k].css() + '"></div>'), b = b + "</div>";
          $("#" + a.containerDivID).on("click", "#" + m, c[k], function(f) {
            a.lch = f.data.lch();
            $("#" + a.containerDivID).trigger("oncolorchange", [a.color]);
          });
        }
        $("#" + h).empty();
        $("#" + h).append(b);
      }, h = [], b = 0;6 > b;b++) {
        h.push(n.whiteToBlackInterpolator(0.2 * b));
      }
      c(n.lightSpectrum, this.colorBandDivID + "-0");
      c(n.darkSpectrum, this.colorBandDivID + "-1");
      c(h, this.blackToWhiteBandDivID);
    };
    return b;
  }();
  n.BasicPicker = q;
})(picolor || (picolor = {}));
(function(n) {
  var q = function() {
    function b(a, f) {
      this.containerDivID = a;
      this.blueRange = [chroma.hex("#deebf7"), chroma.hex("#08306b")];
      this.orangeRange = [chroma.hex("#fee6ce"), chroma.hex("#7f2704")];
      this.greenRange = [chroma.hex("#e5f5e0"), chroma.hex("#00441b")];
      this.grayRange = [chroma.hex("#d9d9d9"), chroma.hex("#000000")];
      this.brownWhiteRange = [chroma.hex("#543005"), chroma.hex("#f5f5f5")];
      this.whiteSeagreenRange = [chroma.hex("#f5f5f5"), chroma.hex("#003c30")];
      this.redYellowRange = [chroma.hex("#a50026"), chroma.hex("#ffffbf")];
      this.yellowPurpleRange = [chroma.hex("#ffffbf"), chroma.hex("#313695")];
      this.qualitativePaletteCount = 1;
      this.brewerPairedRanges = [[chroma.hex(chroma.brewer.Paired[0]), chroma.hex(chroma.brewer.Paired[1])], [chroma.hex(chroma.brewer.Paired[2]), chroma.hex(chroma.brewer.Paired[3])], [chroma.hex(chroma.brewer.Paired[4]), chroma.hex(chroma.brewer.Paired[5])], [chroma.hex(chroma.brewer.Paired[6]), chroma.hex(chroma.brewer.Paired[7])], [chroma.hex(chroma.brewer.Paired[8]), chroma.hex(chroma.brewer.Paired[9])], [chroma.hex(chroma.brewer.Paired[10]), chroma.hex(chroma.brewer.Paired[11])]];
      this.pad = this.margin = 10;
      this.w = this.h = 33;
      this.palMatrix = [];
      this.selectedPalIdx = 0;
      this.isDraggingLightness = !1;
      this.containerDivID = a;
      this.paletteCanvasDivID = this.containerDivID + "-canvas";
      f && this.setOptions(f);
      var c = '<div style="background-color: #E0E0E0; padding 5px; cursor: pointer;">\t<canvas id="' + this.paletteCanvasDivID + '"></canvas></div>', b = $("#" + this.containerDivID);
      b.empty();
      b.append(c);
      $("#" + this.paletteCanvasDivID).click(this.setPalette.bind(this));
    }
    b.prototype.generateScale = function(a) {
      return chroma.scale([a[0].hex(), a[1].hex()]).correctLightness(!0);
    };
    Object.defineProperty(b.prototype, "sequentialPalettes", {get:function() {
      var a = this.generateScale(this.blueRange), f = this.generateScale(this.orangeRange), c = this.generateScale(this.greenRange);
      return[this.generateScale(this.grayRange), a, c, f];
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "divergentPalettes", {get:function() {
      chroma.scale([this.brownWhiteRange[0].hex(), this.brownWhiteRange[1].hex()]).correctLightness(!0);
      chroma.scale([this.whiteSeagreenRange[0].hex(), this.whiteSeagreenRange[1].hex()]).correctLightness(!0);
      chroma.scale([this.redYellowRange[0].hex(), this.redYellowRange[1].hex()]).correctLightness(!0);
      chroma.scale([this.yellowPurpleRange[0].hex(), this.yellowPurpleRange[1].hex()]).correctLightness(!0);
      return[[this.generateScale(this.brownWhiteRange), this.generateScale(this.whiteSeagreenRange)], [this.generateScale(this.redYellowRange), this.generateScale(this.yellowPurpleRange)]];
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "brewerPairedScales", {get:function() {
      for (var a = [], f = 0;f < this.brewerPairedRanges.length;f++) {
        var c = this.generateScale(this.brewerPairedRanges[f]);
        a.push(c);
      }
      return a;
    }, enumerable:!0, configurable:!0});
    b.prototype.setPalette = function(a) {
      var f = this.sequentialPalettes.length + this.divergentPalettes.length + this.qualitativePaletteCount;
      this.selectedPalIdx = Math.floor((a.pageX - this.offset.left) / ((2 * this.margin + this.w * f + this.pad * (f - 1)) / f));
      $("#" + this.containerDivID).trigger("oncolorchange", [this.hexPalette]);
      this.draw();
    };
    b.prototype.setOptions = function(a) {
      a.categoryCount && 1 < a.categoryCount && (this._categoryCount = a.categoryCount);
    };
    Object.defineProperty(b.prototype, "hexPalette", {get:function() {
      for (var a = [], f = this.palMatrix[this.selectedPalIdx], c = 0;c < f.length;c++) {
        a.push(f[c].hex());
      }
      return a;
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "categoryCount", {get:function() {
      return this._categoryCount;
    }, set:function(a) {
      this._categoryCount = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    b.prototype.draw = function() {
      this.offset = $("#" + this.paletteCanvasDivID).offset();
      var a = document.getElementById(this.paletteCanvasDivID), f = a.getContext("2d"), c = this.categoryCount, b = this.sequentialPalettes.length + this.divergentPalettes.length + this.qualitativePaletteCount;
      a.width = 2 * this.margin + this.w * b + this.pad * (b - 1);
      a.height = 2 * this.margin + this.h * c;
      for (a = 0;a < this.sequentialPalettes.length;a++) {
        for (var b = [], p = this.sequentialPalettes[a], g = 0;g < c;g++) {
          var d = g / (c - 1);
          b.push(p(d));
        }
        this.palMatrix.push(b);
      }
      for (a = 0;a < this.divergentPalettes.length;a++) {
        for (var b = [], p = this.divergentPalettes[a][0], l = this.divergentPalettes[a][1], g = 0;g < c;g++) {
          d = g / (c - 1), d = 0.5 >= d ? p(2 * d) : l(2 * (d - 0.5)), b.push(d);
        }
        this.palMatrix.push(b);
      }
      b = [];
      d = 2;
      2 * this.brewerPairedScales.length < c && (d = Math.ceil(c / this.brewerPairedScales.length));
      for (a = 0;a < this.brewerPairedScales.length && b.length < c;a++) {
        for (p = this.brewerPairedScales[a], g = 0;g < d && b.length < c;g++) {
          b.push(p(g / (d - 1)));
        }
      }
      this.palMatrix.push(b);
      for (a = 0;a < this.palMatrix.length;a++) {
        for (b = this.palMatrix[a], g = 0;g < b.length;g++) {
          f.fillStyle = b[g].hex(), f.fillRect(this.margin + a * (this.w + this.pad), this.margin + g * this.h, this.w, this.h);
        }
      }
      f.strokeStyle = "black";
      f.lineWidth = 2;
      f.strokeRect(this.margin - 2 + this.selectedPalIdx * (this.w + this.pad), this.margin - 2, this.w + 4, this.h * c + 4);
    };
    return b;
  }();
  n.Palette = q;
})(picolor || (picolor = {}));
(function(n) {
  var q = function() {
    function b(a, b) {
      var c = this;
      this._lch = n.whiteToBlackInterpolator(0.4).lch();
      this._alpha = 1;
      this.height = this.width = 298;
      this.cx = this.width / 2;
      this.cy = this.height / 2;
      this.radius = 119;
      b && this.setOptions(b);
      this.containerDivID = a;
      this.colorWheelDivID = this.containerDivID + "-colorwheel";
      var h = '<div style="background-color: #E0E0E0; padding 5px">\t<canvas id="' + this.colorWheelDivID + '"></canvas></div>', p = $("#" + this.containerDivID);
      p.empty();
      p.append(h);
      $("#" + this.colorWheelDivID).mouseleave(this.setWheelDragStateOff.bind(this));
      $("#" + this.colorWheelDivID).mouseup(this.setWheelDragStateOff.bind(this));
      $("#" + this.colorWheelDivID).mousedown(function(a) {
        c.setWheelDragStateOn(a);
        c.setWheelColor(a);
      });
      $("#" + this.colorWheelDivID).mousemove(function(a) {
        c.setCursor(a);
        c.setWheelColor(a);
      });
    }
    b.prototype.setOptions = function(a) {
      a.color && (this._lch = a.color.lch(), this._alpha = a.color.alpha());
    };
    b.prototype.setWheelDragStateOn = function(a) {
      var b = a.pageX - this.offset.left;
      a = a.pageY - this.offset.top;
      var c = b - this.cx, h = a - this.cy;
      Math.sqrt(c * c + h * h) < this.radius && (this.isDraggingColor = !0);
      30 <= a && a <= this.height - 30 && 0 <= b && 18 >= b && (this.isDraggingLightness = !0);
      30 <= a && a <= this.height - 30 && b >= this.width - 19 && b <= this.width && (this.isDraggingAlpha = !0);
    };
    b.prototype.setCursor = function(a) {
      if (!(this.isDraggingAlpha || this.isDraggingColor || this.isDraggingLightness)) {
        var b = a.pageX - this.offset.left;
        a = a.pageY - this.offset.top;
        var c = b - this.cx, h = a - this.cy;
        Math.sqrt(c * c + h * h) < this.radius ? $("#" + this.colorWheelDivID).css("cursor", "crosshair") : 30 <= a && a <= this.height - 30 && 0 <= b && 18 >= b ? $("#" + this.colorWheelDivID).css("cursor", "s-resize") : 30 <= a && a <= this.height - 30 && b >= this.width - 19 && b <= this.width ? $("#" + this.colorWheelDivID).css("cursor", "s-resize") : $("#" + this.colorWheelDivID).css("cursor", "default");
      }
    };
    b.prototype.setWheelColor = function(a) {
      if (this.isDraggingAlpha || this.isDraggingColor || this.isDraggingLightness) {
        var b = a.pageX - this.offset.left;
        a = a.pageY - this.offset.top;
        if (this.isDraggingColor) {
          var c = b - this.cx, h = a - this.cy, b = Math.min(this.radius, Math.sqrt(c * c + h * h)), c = 180 * Math.atan2(h, c) / Math.PI;
          this.lch = [this.lch[0], 100 * b / this.radius, c];
        }
        this.isDraggingLightness && (this.lch = [Math.max(0, Math.min(100, 100 - (a - 30) / (this.height - 60) * 100)), this.lch[1], this.lch[2]]);
        this.isDraggingAlpha && (this.alpha = Math.max(0, Math.min(1, 1 - (a - 30) / (this.height - 60))));
        $("#" + this.containerDivID).trigger("oncolorchange", [this.color]);
      }
    };
    b.prototype.setWheelDragStateOff = function(a) {
      this.isDraggingLightness = this.isDraggingColor = this.isDraggingAlpha = !1;
    };
    Object.defineProperty(b.prototype, "lch", {get:function() {
      return this._lch;
    }, set:function(a) {
      0 > a[2] && (a[2] += 360);
      360 <= a[2] && (a[2] -= 360);
      this._lch = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "hex", {get:function() {
      return chroma.lch(this.lch[0], this.lch[1], this.lch[2]).hex();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "alpha", {get:function() {
      return this._alpha;
    }, set:function(a) {
      this._alpha = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "color", {get:function() {
      var a = chroma.lch(this.lch[0], this.lch[1], this.lch[2]);
      a.alpha(this._alpha);
      return a;
    }, set:function(a) {
      this._lch = a.lch();
      this._alpha = a.alpha();
      this.draw();
    }, enumerable:!0, configurable:!0});
    b.prototype.draw = function() {
      this.offset = $("#" + this.colorWheelDivID).offset();
      var a = document.getElementById(this.colorWheelDivID), b = a.getContext("2d"), c, h, p = Number.MAX_VALUE;
      a.width = this.width;
      a.height = this.height;
      for (var a = b.createImageData(this.width, this.height), g = a.data, d = 0, l = 0;l < this.height;l++) {
        for (var k = 0;k < this.width;k++, d += 4) {
          var m = k - this.cx, e = l - this.cy, n = Math.sqrt(m * m + e * e);
          if (n < this.radius + 0.5) {
            e = 180 * Math.atan2(e, m) / Math.PI;
            0 > e && (e += 360);
            360 < e && (e -= 360);
            var t = 100 * n / this.radius, m = chroma.lch2rgb(this.lch[0], t, e), e = Math.sqrt(Math.pow(t - this.lch[1], 2) + Math.pow(e - this.lch[2], 2));
            e < p && (p = e, c = k, h = l);
            var e = this.alpha, t = m[0], q = m[1], v = m[2], r = 0 == Math.floor(k / 5) % 2, s = 0 == Math.floor(l / 5) % 2, u = r && !s || !r && s ? 250 : 200, s = r = u;
            g[d] = t * e + r * (1 - e);
            g[d + 1] = q * e + s * (1 - e);
            g[d + 2] = v * e + u * (1 - e);
            g[d + 3] = 255 * Math.max(0, this.radius - n);
          }
        }
      }
      for (l = d = 0;l < this.height;l++) {
        for (k = 0;k < this.width;k++, d += 4) {
          30 > l || l > this.height - 30 || 2 > k || 15 < k || (m = chroma.lch2rgb(100 - 100 * (l - 30) / (this.height - 60), this.lch[1], this.lch[2]), g[d] = m[0], g[d + 1] = m[1], g[d + 2] = m[2], g[d + 3] = 255);
        }
      }
      d = 0;
      m = chroma.lch2rgb(this.lch[0], this.lch[1], this.lch[2]);
      for (l = 0;l < this.height;l++) {
        for (k = 0;k < this.width;k++, d += 4) {
          30 > l || l > this.height - 30 || k < this.width - 16 || k > this.width - 3 || (e = 1 - (l - 30) / (this.height - 60), t = m[0], q = m[1], v = m[2], r = 0 == Math.floor(k / 5) % 2, s = 0 == Math.floor(l / 5) % 2, s = r = u = r && !s || !r && s ? 250 : 200, g[d] = t * e + r * (1 - e), g[d + 1] = q * e + s * (1 - e), g[d + 2] = v * e + u * (1 - e), g[d + 3] = 255);
        }
      }
      b.putImageData(a, 0, 0);
      b.beginPath();
      b.lineWidth = 1.5;
      b.strokeStyle = 50 < this.lch[0] ? "#2f2f2f" : "#dfdfdf";
      p = 30 + (100 - this.lch[0]) / 100 * (this.height - 60);
      p = Math.max(37, Math.min(this.height - 30 - 6, p));
      b.arc(9, p, 5, 0, 2 * Math.PI, !1);
      b.stroke();
      b.beginPath();
      0.5 > this.alpha && (b.strokeStyle = "#2f2f2f");
      b.arc(c, h, 6, 0, 2 * Math.PI, !1);
      b.stroke();
      b.beginPath();
      c = Math.min(this.height - 35, 30 + (1 - this.alpha) * (this.height - 60));
      c = Math.max(37, Math.min(this.height - 30 - 6, c));
      b.arc(this.width - 9, c, 5, 0, 2 * Math.PI, !1);
      b.stroke();
    };
    return b;
  }();
  n.ColorWheel = q;
})(picolor || (picolor = {}));


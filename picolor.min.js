var picolor;
(function(n) {
  n.lightSpectrum = [chroma.hex(chroma.brewer.Paired[0]), chroma.hex(chroma.brewer.Paired[2]), chroma.hex(chroma.brewer.Paired[10]), chroma.hex(chroma.brewer.Paired[6]), chroma.hex(chroma.brewer.Paired[4]), chroma.hex(chroma.brewer.Paired[8])];
  n.darkSpectrum = [chroma.hex(chroma.brewer.Paired[1]), chroma.hex(chroma.brewer.Paired[3]), chroma.hex(chroma.brewer.Paired[11]), chroma.hex(chroma.brewer.Paired[7]), chroma.hex(chroma.brewer.Paired[5]), chroma.hex(chroma.brewer.Paired[9])];
  n.whiteToBlackInterpolator = chroma.scale(["white", "black"]).correctLightness(!0);
  var r = function() {
    function g(a, b) {
      var e = this;
      this._lch = n.whiteToBlackInterpolator(0.4).lch();
      this._alpha = 255;
      this._showBasicSelector = !0;
      this._showLabels = this._showColorWheel = !1;
      this.height = this.width = 298;
      this.cx = this.width / 2;
      this.cy = this.height / 2;
      this.radius = 119;
      b && this.setOptions(b);
      this.containerDivID = a;
      this.colorBandDivID = this.containerDivID + "-colorband";
      this.blackToWhiteBandDivID = this.containerDivID + "-blacktowhiteband";
      this.colorWheelDivID = this.containerDivID + "-colorwheel";
      var d = '<div class="picolor-container">\t<div class="picolor-top-container">\t\t<div id="' + this.colorBandDivID + '-0"></div>\t\t<div id="' + this.colorBandDivID + '-1"></div>\t\t<div id="' + this.blackToWhiteBandDivID + '" style="margin-top: 6px"></div>\t</div>\t<div class="picolor-bottom-container">\t\t<canvas id="' + this.colorWheelDivID + '"></canvas>\t</div></div>', g = $("#" + this.containerDivID);
      g.empty();
      g.append(d);
      $("#" + this.colorWheelDivID).mouseleave(this.setWheelDragStateOff.bind(this));
      $("#" + this.colorWheelDivID).mouseup(this.setWheelDragStateOff.bind(this));
      $("#" + this.colorWheelDivID).mousedown(function(a) {
        e.setWheelDragStateOn(a);
        e.setWheelColor(a);
      });
      $("#" + this.colorWheelDivID).mousemove(this.setWheelColor.bind(this));
    }
    g.prototype.setOptions = function(a) {
      a.color && (this._lch = a.color.lch(), this._alpha = a.color.alpha());
      this._showColorWheel = !!a.showColorWheel;
      this._showLabels = !!a.showLabels;
      this._showBasicSelector = !!a.showColorWheel;
    };
    g.prototype.setWheelDragStateOn = function(a) {
      var b = a.pageX - this.offset.left;
      a = a.pageY - this.offset.top;
      var e = b - this.cx, d = a - this.cy;
      Math.sqrt(e * e + d * d) < this.radius && (this.isDraggingColor = !0);
      30 <= a && a <= this.height - 30 && -2 <= b && 24 >= b && (this.isDraggingLightness = !0);
      30 <= a && a <= this.height - 30 && b >= this.width - 25 && b <= this.width + 1 && (this.isDraggingAlpha = !0);
    };
    g.prototype.setWheelColor = function(a) {
      if (this.isDraggingAlpha || this.isDraggingColor || this.isDraggingLightness) {
        var b = a.pageX - this.offset.left;
        a = a.pageY - this.offset.top;
        if (this.isDraggingColor) {
          var e = b - this.cx, d = a - this.cy, b = Math.min(this.radius, Math.sqrt(e * e + d * d)), e = 180 * Math.atan2(d, e) / Math.PI;
          this.lch = [this.lch[0], 100 * b / this.radius, e];
        }
        this.isDraggingLightness && (this.lch = [Math.max(0, Math.min(100, 100 - (a - 30) / (this.height - 60) * 100)), this.lch[1], this.lch[2]]);
        this.isDraggingAlpha && (this.alpha = Math.max(0, Math.min(255, 255 - 255 * (a - 30) / (this.height - 60))));
      }
    };
    g.prototype.setWheelDragStateOff = function(a) {
      this.isDraggingLightness = this.isDraggingColor = this.isDraggingAlpha = !1;
    };
    Object.defineProperty(g.prototype, "lch", {get:function() {
      return this._lch;
    }, set:function(a) {
      0 > a[2] && (a[2] += 360);
      360 <= a[2] && (a[2] -= 360);
      this._lch = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(g.prototype, "alpha", {get:function() {
      return this._alpha;
    }, set:function(a) {
      this._alpha = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    g.prototype.getColor = function() {
      return chroma.lch(this.lch[0], this.lch[1], this.lch[2]);
    };
    Object.defineProperty(g.prototype, "showColorWheel", {get:function() {
      return this._showColorWheel;
    }, set:function(a) {
      this._showColorWheel = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(g.prototype, "showLabels", {get:function() {
      return this._showLabels;
    }, set:function(a) {
      this._showLabels = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(g.prototype, "showBasicSelector", {get:function() {
      return this._showBasicSelector;
    }, set:function(a) {
      this._showBasicSelector = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    g.prototype.draw = function() {
      $("#" + this.containerDivID).off("click");
      this.showBasicSelector && this.drawBasicSelector();
      this.showColorWheel && this.drawColorWheel();
    };
    g.prototype.drawBasicSelector = function() {
      for (var a = this, b = function(b, f) {
        for (var c = "", d = 0;d < b.length;d++) {
          var e = f + "-" + d, c = c + ('<div id="' + e + '" class="picolor-box-container');
          a.getColor().css() === b[d].css() && (c += " picolor-box-container-selected");
          c += '">';
          c += '\t<div class="picolor-box" style="background-color:' + b[d].css() + '"></div>';
          c += "</div>";
          $("#" + a.containerDivID).on("click", "#" + e, b[d].lch(), function(b) {
            a.lch = b.data;
          });
        }
        $("#" + f).empty();
        $("#" + f).append(c);
      }, e = [], d = 0;6 > d;d++) {
        e.push(n.whiteToBlackInterpolator(0.2 * d));
      }
      b(n.lightSpectrum, this.colorBandDivID + "-0");
      b(n.darkSpectrum, this.colorBandDivID + "-1");
      b(e, this.blackToWhiteBandDivID);
    };
    g.prototype.drawColorWheel = function() {
      this.offset = $("#" + this.colorWheelDivID).offset();
      var a = document.getElementById(this.colorWheelDivID), b = a.getContext("2d"), e, d, g = Number.MAX_VALUE;
      a.width = this.width;
      a.height = this.height;
      for (var a = b.createImageData(this.width, this.height), f = a.data, c = 0, k = 0;k < this.height;k++) {
        for (var l = 0;l < this.width;l++, c += 4) {
          var m = l - this.cx, h = k - this.cy, n = Math.sqrt(m * m + h * h);
          if (n < this.radius + 0.5) {
            h = 180 * Math.atan2(h, m) / Math.PI;
            0 > h && (h += 360);
            360 < h && (h -= 360);
            var s = 100 * n / this.radius, m = chroma.lch2rgb(this.lch[0], s, h), h = Math.sqrt(Math.pow(s - this.lch[1], 2) + Math.pow(h - this.lch[2], 2));
            h < g && (g = h, e = l, d = k);
            var h = this.alpha, s = m[0], r = m[1], u = m[2], p = 0 == Math.floor(l / 5) % 2, q = 0 == Math.floor(k / 5) % 2, t = p && !q || !p && q ? 250 : 200, q = p = t;
            f[c] = s * h / 255 + p * (1 - h / 255);
            f[c + 1] = r * h / 255 + q * (1 - h / 255);
            f[c + 2] = u * h / 255 + t * (1 - h / 255);
            f[c + 3] = 255 * Math.max(0, this.radius - n);
          }
        }
      }
      for (k = c = 0;k < this.height;k++) {
        for (l = 0;l < this.width;l++, c += 4) {
          30 > k || k > this.height - 30 || 2 > l || 15 < l || (m = chroma.lch2rgb(100 - 100 * (k - 30) / (this.height - 60), this.lch[1], this.lch[2]), f[c] = m[0], f[c + 1] = m[1], f[c + 2] = m[2], f[c + 3] = 255);
        }
      }
      c = 0;
      m = chroma.lch2rgb(this.lch[0], this.lch[1], this.lch[2]);
      for (k = 0;k < this.height;k++) {
        for (l = 0;l < this.width;l++, c += 4) {
          30 > k || k > this.height - 30 || l < this.width - 16 || l > this.width - 3 || (h = 255 - 255 * (k - 30) / (this.height - 60), s = m[0], r = m[1], u = m[2], p = 0 == Math.floor(l / 5) % 2, q = 0 == Math.floor(k / 5) % 2, q = p = t = p && !q || !p && q ? 250 : 200, f[c] = s * h / 255 + p * (1 - h / 255), f[c + 1] = r * h / 255 + q * (1 - h / 255), f[c + 2] = u * h / 255 + t * (1 - h / 255), f[c + 3] = 255);
        }
      }
      b.putImageData(a, 0, 0);
      b.beginPath();
      b.lineWidth = 2;
      b.strokeStyle = 50 < this.lch[0] ? "#0f0f0f" : "#efefef";
      b.arc(e, d, 3, 0, 2 * Math.PI, !1);
      b.stroke();
      b.beginPath();
      e = Math.min(this.height - 35, 30 + (100 - this.lch[0]) / 100 * (this.height - 60));
      b.rect(1, e, 16, 5);
      b.stroke();
      b.beginPath();
      128 > this.alpha && (b.strokeStyle = "#0f0f0f");
      e = Math.min(this.height - 35, 30 + (1 - this.alpha / 255) * (this.height - 60));
      b.rect(this.width - 17, e, 16, 5);
      b.stroke();
      this.showLabels && (b.fillStyle = "#818181", b.font = "10px sans-serif", b.fillText("Dark", 20, this.height - 30), b.textBaseline = "top", b.fillText("Light", 20, 30), b.textAlign = "end", b.fillText("Opaque", this.width - 21, 30), b.textBaseline = "bottom", b.fillText("Transparent", this.width - 21, this.height - 30));
    };
    return g;
  }();
  n.SingleColor = r;
  r = function() {
    function g(a, b) {
      this.containerDivID = a;
      this.bluePalette = chroma.scale(["#deebf7", "#08306b"]).correctLightness(!0);
      this.orangePalette = chroma.scale(["#fee6ce", "#7f2704"]).correctLightness(!0);
      this.greenPalette = chroma.scale(["#e5f5e0", "#00441b"]).correctLightness(!0);
      this.grayPalette = chroma.scale(["#d9d9d9", "black"]).correctLightness(!0);
      this.brownWhiteSeagreenPalette1 = chroma.scale(["#543005", "#f5f5f5"]).correctLightness(!0);
      this.brownWhiteSeagreenPalette2 = chroma.scale(["#f5f5f5", "#003c30"]).correctLightness(!0);
      this.redYellowPurplePalette1 = chroma.scale(["#a50026", "#ffffbf"]).correctLightness(!0);
      this.redYellowPurplePalette2 = chroma.scale(["#ffffbf", "#313695"]).correctLightness(!0);
      this.pad = this.margin = 10;
      this.w = this.h = 33;
      this.palMatrix = [];
      this.selectedPalIdx = 0;
      this.sequentialPalettes = [this.grayPalette, this.bluePalette, this.greenPalette, this.orangePalette];
      this.divergentPalettes = [[this.brownWhiteSeagreenPalette1, this.brownWhiteSeagreenPalette2], [this.redYellowPurplePalette1, this.redYellowPurplePalette2]];
      this.qualitativePalettes = [chroma.brewer.Paired];
      this.containerDivID = a;
      this.paletteCanvasDivID = this.containerDivID + "-canvas";
      b && this.setOptions(b);
      var e = '<div class="picolor-container">\t<canvas id="' + this.paletteCanvasDivID + '"></canvas></div>', d = $("#" + this.containerDivID);
      d.empty();
      d.append(e);
      $("#" + this.paletteCanvasDivID).click(this.onClick.bind(this));
    }
    g.prototype.onClick = function(a) {
      var b = this.sequentialPalettes.length + this.divergentPalettes.length + this.qualitativePalettes.length;
      this.selectedPalIdx = Math.floor((a.pageX - this.offset.left) / ((2 * this.margin + this.w * b + this.pad * (b - 1)) / b));
      this.draw();
    };
    g.prototype.setOptions = function(a) {
      a.categoryCount && 1 < a.categoryCount && (this._categoryCount = a.categoryCount);
    };
    Object.defineProperty(g.prototype, "hexPalette", {get:function() {
      return this.palMatrix[this.selectedPalIdx];
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(g.prototype, "categoryCount", {get:function() {
      return this._categoryCount;
    }, set:function(a) {
      this._categoryCount = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    g.prototype.draw = function() {
      this.offset = $("#" + this.paletteCanvasDivID).offset();
      var a = document.getElementById(this.paletteCanvasDivID), b = a.getContext("2d"), e = this.categoryCount, d = this.sequentialPalettes.length + this.divergentPalettes.length + this.qualitativePalettes.length;
      a.width = 2 * this.margin + this.w * d + this.pad * (d - 1);
      a.height = 2 * this.margin + this.h * e;
      for (a = 0;a < this.sequentialPalettes.length;a++) {
        for (var d = [], g = this.sequentialPalettes[a], f = 0;f < e;f++) {
          var c = f / (e - 1);
          d.push(g(c).hex());
        }
        this.palMatrix.push(d);
      }
      for (a = 0;a < this.divergentPalettes.length;a++) {
        for (var d = [], g = this.divergentPalettes[a][0], k = this.divergentPalettes[a][1], f = 0;f < e;f++) {
          c = f / (e - 1), c = 0.5 >= c ? g(2 * c).hex() : k(2 * (c - 0.5)).hex(), d.push(c);
        }
        this.palMatrix.push(d);
      }
      for (a = 0;a < this.qualitativePalettes.length;a++) {
        d = [];
        c = this.qualitativePalettes[a];
        for (f = 0;f < c.length && f < e;f++) {
          d.push(c[f]);
        }
        this.palMatrix.push(d);
      }
      for (a = 0;a < this.palMatrix.length;a++) {
        for (d = this.palMatrix[a], f = 0;f < d.length;f++) {
          b.fillStyle = d[f], b.fillRect(this.margin + a * (this.w + this.pad), this.margin + f * this.h, this.w, this.h);
        }
      }
      b.strokeStyle = "black";
      b.lineWidth = 2;
      b.strokeRect(this.margin - 2 + this.selectedPalIdx * (this.w + this.pad), this.margin - 2, this.w + 4, this.h * e + 4);
    };
    return g;
  }();
  n.Palette = r;
})(picolor || (picolor = {}));


var picolor;
(function(m) {
  m.lightSpectrum = [chroma.hex(chroma.brewer.Paired[0]), chroma.hex(chroma.brewer.Paired[2]), chroma.hex(chroma.brewer.Paired[10]), chroma.hex(chroma.brewer.Paired[6]), chroma.hex(chroma.brewer.Paired[4]), chroma.hex(chroma.brewer.Paired[8])];
  m.darkSpectrum = [chroma.hex(chroma.brewer.Paired[1]), chroma.hex(chroma.brewer.Paired[3]), chroma.hex(chroma.brewer.Paired[11]), chroma.hex(chroma.brewer.Paired[7]), chroma.hex(chroma.brewer.Paired[5]), chroma.hex(chroma.brewer.Paired[9])];
  m.whiteToBlackInterpolator = chroma.scale(["white", "black"]).correctLightness(!0);
  var p = function() {
    function e(a, b) {
      this._lch = m.whiteToBlackInterpolator(0.4).lch();
      this._alpha = 1;
      b && this.setOptions(b);
      this.containerDivID = a;
      this.colorBandDivID = this.containerDivID + "-colorband";
      this.blackToWhiteBandDivID = this.containerDivID + "-blacktowhiteband";
      var f = '<div class="picolor-container">\t<div id="' + this.colorBandDivID + '-0"></div>\t<div id="' + this.colorBandDivID + '-1"></div>\t<div id="' + this.blackToWhiteBandDivID + '" style="margin-top: 6px"></div></div>', d = $("#" + this.containerDivID);
      d.empty();
      d.append(f);
    }
    e.prototype.setOptions = function(a) {
      a.color && (this._lch = a.color.lch(), this._alpha = a.color.alpha());
    };
    Object.defineProperty(e.prototype, "lch", {get:function() {
      return this._lch;
    }, set:function(a) {
      0 > a[2] && (a[2] += 360);
      360 <= a[2] && (a[2] -= 360);
      this._lch = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(e.prototype, "hex", {get:function() {
      return chroma.lch(this.lch[0], this.lch[1], this.lch[2]).hex();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(e.prototype, "color", {get:function() {
      var a = chroma.lch(this.lch[0], this.lch[1], this.lch[2]);
      a.alpha(this._alpha);
      return a;
    }, set:function(a) {
      this._lch = a.lch();
      this._alpha = a.alpha();
      this.draw();
    }, enumerable:!0, configurable:!0});
    e.prototype.draw = function() {
      var a = this;
      $("#" + this.containerDivID).off("click");
      for (var b = function(b, f) {
        for (var c = "", d = 0;d < b.length;d++) {
          var e = f + "-" + d, c = c + ('<div id="' + e + '" style="width: 38px;height: 24px;display: inline-block;padding: 1px;background-color: #E0E0E0;margin: 0px 4px 0px 4px;'), c = a.color.css() === b[d].css() ? c + " border: 2px solid black;" : c + " border: 2px solid #E0E0E0;", c = c + '">', c = c + ('\t<div style="height: 24px; background-color:' + b[d].css() + '"></div>'), c = c + "</div>";
          $("#" + a.containerDivID).on("click", "#" + e, b[d], function(b) {
            a.lch = b.data.lch();
            $("#" + a.containerDivID).trigger("oncolorchange", [a.color]);
          });
        }
        $("#" + f).empty();
        $("#" + f).append(c);
      }, f = [], d = 0;6 > d;d++) {
        f.push(m.whiteToBlackInterpolator(0.2 * d));
      }
      b(m.lightSpectrum, this.colorBandDivID + "-0");
      b(m.darkSpectrum, this.colorBandDivID + "-1");
      b(f, this.blackToWhiteBandDivID);
    };
    return e;
  }();
  m.BasicPicker = p;
  p = function() {
    function e(a, b) {
      var f = this;
      this._lch = m.whiteToBlackInterpolator(0.4).lch();
      this._alpha = 1;
      this.height = this.width = 298;
      this.cx = this.width / 2;
      this.cy = this.height / 2;
      this.radius = 119;
      b && this.setOptions(b);
      this.containerDivID = a;
      this.colorWheelDivID = this.containerDivID + "-colorwheel";
      var d = '<div style="background-color: #E0E0E0; padding 5px">\t<canvas id="' + this.colorWheelDivID + '"></canvas></div>', e = $("#" + this.containerDivID);
      e.empty();
      e.append(d);
      $("#" + this.colorWheelDivID).mouseleave(this.setWheelDragStateOff.bind(this));
      $("#" + this.colorWheelDivID).mouseup(this.setWheelDragStateOff.bind(this));
      $("#" + this.colorWheelDivID).mousedown(function(a) {
        f.setWheelDragStateOn(a);
        f.setWheelColor(a);
      });
      $("#" + this.colorWheelDivID).mousemove(this.setWheelColor.bind(this));
    }
    e.prototype.setOptions = function(a) {
      a.color && (this._lch = a.color.lch(), this._alpha = a.color.alpha());
    };
    e.prototype.setWheelDragStateOn = function(a) {
      var b = a.pageX - this.offset.left;
      a = a.pageY - this.offset.top;
      var f = b - this.cx, d = a - this.cy;
      Math.sqrt(f * f + d * d) < this.radius && (this.isDraggingColor = !0);
      30 <= a && a <= this.height - 30 && -2 <= b && 24 >= b && (this.isDraggingLightness = !0);
      30 <= a && a <= this.height - 30 && b >= this.width - 25 && b <= this.width + 1 && (this.isDraggingAlpha = !0);
    };
    e.prototype.setWheelColor = function(a) {
      if (this.isDraggingAlpha || this.isDraggingColor || this.isDraggingLightness) {
        var b = a.pageX - this.offset.left;
        a = a.pageY - this.offset.top;
        if (this.isDraggingColor) {
          var f = b - this.cx, d = a - this.cy, b = Math.min(this.radius, Math.sqrt(f * f + d * d)), f = 180 * Math.atan2(d, f) / Math.PI;
          this.lch = [this.lch[0], 100 * b / this.radius, f];
        }
        this.isDraggingLightness && (this.lch = [Math.max(0, Math.min(100, 100 - (a - 30) / (this.height - 60) * 100)), this.lch[1], this.lch[2]]);
        this.isDraggingAlpha && (this.alpha = Math.max(0, Math.min(1, 1 - (a - 30) / (this.height - 60))));
        $("#" + this.containerDivID).trigger("oncolorchange", [this.color]);
      }
    };
    e.prototype.setWheelDragStateOff = function(a) {
      this.isDraggingLightness = this.isDraggingColor = this.isDraggingAlpha = !1;
    };
    Object.defineProperty(e.prototype, "lch", {get:function() {
      return this._lch;
    }, set:function(a) {
      0 > a[2] && (a[2] += 360);
      360 <= a[2] && (a[2] -= 360);
      this._lch = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(e.prototype, "hex", {get:function() {
      return chroma.lch(this.lch[0], this.lch[1], this.lch[2]).hex();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(e.prototype, "alpha", {get:function() {
      return this._alpha;
    }, set:function(a) {
      this._alpha = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(e.prototype, "color", {get:function() {
      var a = chroma.lch(this.lch[0], this.lch[1], this.lch[2]);
      a.alpha(this._alpha);
      return a;
    }, set:function(a) {
      this._lch = a.lch();
      this._alpha = a.alpha();
      this.draw();
    }, enumerable:!0, configurable:!0});
    e.prototype.draw = function() {
      this.offset = $("#" + this.colorWheelDivID).offset();
      var a = document.getElementById(this.colorWheelDivID), b = a.getContext("2d"), f, d, e = Number.MAX_VALUE;
      a.width = this.width;
      a.height = this.height;
      for (var a = b.createImageData(this.width, this.height), g = a.data, c = 0, k = 0;k < this.height;k++) {
        for (var l = 0;l < this.width;l++, c += 4) {
          var n = l - this.cx, h = k - this.cy, m = Math.sqrt(n * n + h * h);
          if (m < this.radius + 0.5) {
            h = 180 * Math.atan2(h, n) / Math.PI;
            0 > h && (h += 360);
            360 < h && (h -= 360);
            var s = 100 * m / this.radius, n = chroma.lch2rgb(this.lch[0], s, h), h = Math.sqrt(Math.pow(s - this.lch[1], 2) + Math.pow(h - this.lch[2], 2));
            h < e && (e = h, f = l, d = k);
            var h = this.alpha, s = n[0], p = n[1], u = n[2], q = 0 == Math.floor(l / 5) % 2, r = 0 == Math.floor(k / 5) % 2, t = q && !r || !q && r ? 250 : 200, r = q = t;
            g[c] = s * h + q * (1 - h);
            g[c + 1] = p * h + r * (1 - h);
            g[c + 2] = u * h + t * (1 - h);
            g[c + 3] = 255 * Math.max(0, this.radius - m);
          }
        }
      }
      for (k = c = 0;k < this.height;k++) {
        for (l = 0;l < this.width;l++, c += 4) {
          30 > k || k > this.height - 30 || 2 > l || 15 < l || (n = chroma.lch2rgb(100 - 100 * (k - 30) / (this.height - 60), this.lch[1], this.lch[2]), g[c] = n[0], g[c + 1] = n[1], g[c + 2] = n[2], g[c + 3] = 255);
        }
      }
      c = 0;
      n = chroma.lch2rgb(this.lch[0], this.lch[1], this.lch[2]);
      for (k = 0;k < this.height;k++) {
        for (l = 0;l < this.width;l++, c += 4) {
          30 > k || k > this.height - 30 || l < this.width - 16 || l > this.width - 3 || (h = 1 - (k - 30) / (this.height - 60), s = n[0], p = n[1], u = n[2], q = 0 == Math.floor(l / 5) % 2, r = 0 == Math.floor(k / 5) % 2, r = q = t = q && !r || !q && r ? 250 : 200, g[c] = s * h + q * (1 - h), g[c + 1] = p * h + r * (1 - h), g[c + 2] = u * h + t * (1 - h), g[c + 3] = 255);
        }
      }
      b.putImageData(a, 0, 0);
      b.beginPath();
      b.lineWidth = 1.5;
      b.strokeStyle = 50 < this.lch[0] ? "#2f2f2f" : "#dfdfdf";
      e = 30 + (100 - this.lch[0]) / 100 * (this.height - 60);
      e = Math.max(37, Math.min(this.height - 30 - 6, e));
      b.arc(9, e, 5, 0, 2 * Math.PI, !1);
      b.stroke();
      b.beginPath();
      0.5 > this.alpha && (b.strokeStyle = "#2f2f2f");
      b.arc(f, d, 6, 0, 2 * Math.PI, !1);
      b.stroke();
      b.beginPath();
      f = Math.min(this.height - 35, 30 + (1 - this.alpha) * (this.height - 60));
      f = Math.max(37, Math.min(this.height - 30 - 6, f));
      b.arc(this.width - 9, f, 5, 0, 2 * Math.PI, !1);
      b.stroke();
    };
    return e;
  }();
  m.ColorWheel = p;
  p = function() {
    function e(a, b) {
      this.containerDivID = a;
      this.bluePalette = chroma.scale(["#deebf7", "#08306b"]).correctLightness(!0);
      this.orangePalette = chroma.scale(["#fee6ce", "#7f2704"]).correctLightness(!0);
      this.greenPalette = chroma.scale(["#e5f5e0", "#00441b"]).correctLightness(!0);
      this.grayPalette = chroma.scale(["#d9d9d9", "black"]).correctLightness(!0);
      this.brownWhiteSeagreenPalette1 = chroma.scale(["#543005", "#f5f5f5"]).correctLightness(!0);
      this.brownWhiteSeagreenPalette2 = chroma.scale(["#f5f5f5", "#003c30"]).correctLightness(!0);
      this.redYellowPurplePalette1 = chroma.scale(["#a50026", "#ffffbf"]).correctLightness(!0);
      this.redYellowPurplePalette2 = chroma.scale(["#ffffbf", "#313695"]).correctLightness(!0);
      this.pad = this.margin = 10;
      this.w = this.h = 33;
      this.palMatrix = [];
      this.lighten = this.selectedPalIdx = 0;
      this.sequentialPalettes = [this.grayPalette, this.bluePalette, this.greenPalette, this.orangePalette];
      this.divergentPalettes = [[this.brownWhiteSeagreenPalette1, this.brownWhiteSeagreenPalette2], [this.redYellowPurplePalette1, this.redYellowPurplePalette2]];
      this.qualitativePalettes = [chroma.brewer.Paired];
      this.containerDivID = a;
      this.paletteCanvasDivID = this.containerDivID + "-canvas";
      b && this.setOptions(b);
      var f = '<div style="background-color: #E0E0E0; padding 5px">\t<canvas id="' + this.paletteCanvasDivID + '"></canvas></div>', d = $("#" + this.containerDivID);
      d.empty();
      d.append(f);
      $("#" + this.paletteCanvasDivID).click(this.onClick.bind(this));
    }
    e.prototype.onClick = function(a) {
      var b = this.sequentialPalettes.length + this.divergentPalettes.length + this.qualitativePalettes.length;
      this.selectedPalIdx = Math.floor((a.pageX - this.offset.left) / ((2 * this.margin + this.w * b + this.pad * (b - 1)) / b));
      $("#" + this.containerDivID).trigger("oncolorchange", [this.hexPalette]);
      this.draw();
    };
    e.prototype.setOptions = function(a) {
      a.categoryCount && 1 < a.categoryCount && (this._categoryCount = a.categoryCount);
    };
    Object.defineProperty(e.prototype, "hexPalette", {get:function() {
      for (var a = [], b = this.palMatrix[this.selectedPalIdx], f = 0;f < b.length;f++) {
        a.push(b[f].hex());
      }
      return a;
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(e.prototype, "categoryCount", {get:function() {
      return this._categoryCount;
    }, set:function(a) {
      this._categoryCount = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    e.prototype.draw = function() {
      this.offset = $("#" + this.paletteCanvasDivID).offset();
      var a = document.getElementById(this.paletteCanvasDivID), b = a.getContext("2d"), f = this.categoryCount, d = this.sequentialPalettes.length + this.divergentPalettes.length + this.qualitativePalettes.length;
      a.width = 2 * this.margin + this.w * d + this.pad * (d - 1);
      a.height = 2 * this.margin + this.h * f;
      for (a = 0;a < this.sequentialPalettes.length;a++) {
        for (var d = [], e = this.sequentialPalettes[a], g = 0;g < f;g++) {
          var c = g / (f - 1);
          d.push(e(c));
        }
        this.palMatrix.push(d);
      }
      for (a = 0;a < this.divergentPalettes.length;a++) {
        for (var d = [], e = this.divergentPalettes[a][0], k = this.divergentPalettes[a][1], g = 0;g < f;g++) {
          c = g / (f - 1), c = 0.5 >= c ? e(2 * c) : k(2 * (c - 0.5)), d.push(c);
        }
        this.palMatrix.push(d);
      }
      for (a = 0;a < this.qualitativePalettes.length;a++) {
        d = [];
        c = this.qualitativePalettes[a];
        for (g = 0;g < c.length && g < f;g++) {
          d.push(chroma.hex(c[g]));
        }
        this.palMatrix.push(d);
      }
      for (a = 0;a < this.palMatrix.length;a++) {
        for (d = this.palMatrix[a], g = 0;g < d.length;g++) {
          b.fillStyle = d[g], b.fillRect(this.margin + a * (this.w + this.pad), this.margin + g * this.h, this.w, this.h);
        }
      }
      b.strokeStyle = "black";
      b.lineWidth = 2;
      b.strokeRect(this.margin - 2 + this.selectedPalIdx * (this.w + this.pad), this.margin - 2, this.w + 4, this.h * f + 4);
    };
    return e;
  }();
  m.Palette = p;
})(picolor || (picolor = {}));


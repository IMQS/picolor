var picolor;
(function(l) {
  l.lightSpectrum = [chroma.hex(chroma.brewer.Paired[0]), chroma.hex(chroma.brewer.Paired[2]), chroma.hex(chroma.brewer.Paired[10]), chroma.hex(chroma.brewer.Paired[6]), chroma.hex(chroma.brewer.Paired[4]), chroma.hex(chroma.brewer.Paired[8])];
  l.darkSpectrum = [chroma.hex(chroma.brewer.Paired[1]), chroma.hex(chroma.brewer.Paired[3]), chroma.hex(chroma.brewer.Paired[11]), chroma.hex(chroma.brewer.Paired[7]), chroma.hex(chroma.brewer.Paired[5]), chroma.hex(chroma.brewer.Paired[9])];
  l.whiteToBlackInterpolator = chroma.scale(["white", "black"]).correctLightness(!0);
  var q = function() {
    function b(a, d) {
      this._lch = l.whiteToBlackInterpolator(0.4).lch();
      this._alpha = 1;
      d && this.setOptions(d);
      this.containerDivID = a;
      this.colorBandDivID = this.containerDivID + "-colorband";
      this.blackToWhiteBandDivID = this.containerDivID + "-blacktowhiteband";
      var c = '<div>\t<div id="' + this.colorBandDivID + '-0"></div>\t<div id="' + this.colorBandDivID + '-1"></div>\t<div id="' + this.blackToWhiteBandDivID + '" style="margin-top: 6px"></div></div>', e = $("#" + this.containerDivID);
      e.empty();
      e.append(c);
    }
    b.prototype.setOptions = function(a) {
      a.color && (this._lch = a.color.lch(), this._alpha = a.color.alpha());
    };
    Object.defineProperty(b.prototype, "lch", {get:function() {
      return this._lch;
    }, set:function(a) {
      0 > a[2] && (a[2] += 360);
      360 <= a[2] && (a[2] -= 360);
      this._lch = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "hex", {get:function() {
      return chroma.lch(this.lch[0], this.lch[1], this.lch[2]).hex();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "color", {get:function() {
      var a = chroma.lch(this.lch[0], this.lch[1], this.lch[2]);
      a.alpha(this._alpha);
      return a;
    }, set:function(a) {
      this._lch = a.lch();
      this._alpha = a.alpha();
      this.draw();
    }, enumerable:!0, configurable:!0});
    b.prototype.draw = function() {
      var a = this;
      $("#" + this.containerDivID).off("click");
      for (var d = function(a, d) {
        var c = a.rgb(), e = d.rgb(), b = c[0] - e[0], h = c[1] - e[1], c = c[2] - e[2];
        return Math.sqrt(b * b + h * h + c * c);
      }, c = function(c, f) {
        for (var e = "", b = 0;b < c.length;b++) {
          var t = f + "-" + b, e = e + ('<div id="' + t + '" style="width: 38px;height: 24px;cursor: pointer;display: inline-block;padding: 1px;background-color: #E0E0E0;margin: 0px 4px 0px 4px;'), e = 1 > d(a.color, c[b]) ? e + " border: 2px solid black;" : e + " border: 2px solid #E0E0E0;", e = e + '">', e = e + ('\t<div style="height: 24px; background-color:' + c[b].css() + '"></div>'), e = e + "</div>";
          $("#" + a.containerDivID).on("click", "#" + t, c[b], function(d) {
            a.lch = d.data.lch();
            $("#" + a.containerDivID).trigger("oncolorchange", [a.color]);
          });
        }
        $("#" + f).empty();
        $("#" + f).append(e);
      }, e = [], b = 0;6 > b;b++) {
        e.push(l.whiteToBlackInterpolator(0.2 * b));
      }
      c(l.lightSpectrum, this.colorBandDivID + "-0");
      c(l.darkSpectrum, this.colorBandDivID + "-1");
      c(e, this.blackToWhiteBandDivID);
    };
    return b;
  }();
  l.BasicPicker = q;
})(picolor || (picolor = {}));
(function(l) {
  var q = function() {
    function b(a, d) {
      this.containerDivID = a;
      this._categoryCount = 3;
      this._alpha = 1;
      this.blueRange = [chroma.hex("#deebf7"), chroma.hex("#08306b")];
      this.orangeRange = [chroma.hex("#fee6ce"), chroma.hex("#7f2704")];
      this.greenRange = [chroma.hex("#e5f5e0"), chroma.hex("#00441b")];
      this.grayRange = [chroma.hex("#d9d9d9"), chroma.hex("#000000")];
      this.brownWhiteRange = [chroma.hex("#543005"), chroma.hex("#f5f5f5")];
      this.whiteSeagreenRange = [chroma.hex("#f5f5f5"), chroma.hex("#003c30")];
      this.redYellowRange = [chroma.hex("#a50026"), chroma.hex("#ffffbf")];
      this.yellowPurpleRange = [chroma.hex("#ffffbf"), chroma.hex("#313695")];
      this.qualitativePaletteCount = 1;
      this.brewerPairedRanges = [[chroma.hex(chroma.brewer.Paired[0]), chroma.hex(chroma.brewer.Paired[1])], [chroma.hex(chroma.brewer.Paired[2]), chroma.hex(chroma.brewer.Paired[3])], [chroma.hex(chroma.brewer.Paired[4]), chroma.hex(chroma.brewer.Paired[5])], [chroma.hex(chroma.brewer.Paired[6]), chroma.hex(chroma.brewer.Paired[7])], [chroma.hex(chroma.brewer.Paired[8]), chroma.hex(chroma.brewer.Paired[9])], [chroma.hex(chroma.brewer.Paired[10]), chroma.hex(chroma.brewer.Paired[11])]];
      this.pad = this.margin = 10;
      this.w = this.h = 33;
      this.selectedPalIdx = 0;
      this.isDraggingLightness = !1;
      this.containerDivID = a;
      this.paletteCanvasDivID = this.containerDivID + "-canvas";
      d && this.setOptions(d);
      var c = '<div style="background-color: #E0E0E0; padding 5px; cursor: pointer;">\t<canvas id="' + this.paletteCanvasDivID + '"></canvas></div>', e = $("#" + this.containerDivID);
      e.empty();
      e.append(c);
      $("#" + this.paletteCanvasDivID).click(this.setPalette.bind(this));
    }
    Object.defineProperty(b.prototype, "alpha", {get:function() {
      return this._alpha;
    }, set:function(a) {
      this._alpha = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    b.prototype.generateScale = function(a) {
      return chroma.scale([a[0].hex(), a[1].hex()]).correctLightness(!0);
    };
    Object.defineProperty(b.prototype, "sequentialPalettes", {get:function() {
      var a = this.generateScale(this.blueRange), d = this.generateScale(this.orangeRange), c = this.generateScale(this.greenRange);
      return[this.generateScale(this.grayRange), a, c, d];
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "divergentPalettes", {get:function() {
      chroma.scale([this.brownWhiteRange[0].hex(), this.brownWhiteRange[1].hex()]).correctLightness(!0);
      chroma.scale([this.whiteSeagreenRange[0].hex(), this.whiteSeagreenRange[1].hex()]).correctLightness(!0);
      chroma.scale([this.redYellowRange[0].hex(), this.redYellowRange[1].hex()]).correctLightness(!0);
      chroma.scale([this.yellowPurpleRange[0].hex(), this.yellowPurpleRange[1].hex()]).correctLightness(!0);
      return[[this.generateScale(this.brownWhiteRange), this.generateScale(this.whiteSeagreenRange)], [this.generateScale(this.redYellowRange), this.generateScale(this.yellowPurpleRange)]];
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "brewerPairedScales", {get:function() {
      for (var a = [], d = 0;d < this.brewerPairedRanges.length;d++) {
        var c = this.generateScale(this.brewerPairedRanges[d]);
        a.push(c);
      }
      return a;
    }, enumerable:!0, configurable:!0});
    b.prototype.setPalette = function(a) {
      var d = this.sequentialPalettes.length + this.divergentPalettes.length + this.qualitativePaletteCount;
      this.selectedPalIdx = Math.floor((a.pageX - this.offset.left) / ((2 * this.margin + this.w * d + this.pad * (d - 1)) / d));
      $("#" + this.containerDivID).trigger("oncolorchange", [this.palette]);
      this.draw();
    };
    b.prototype.setOptions = function(a) {
      a.categoryCount && 1 < a.categoryCount && (this._categoryCount = a.categoryCount);
    };
    Object.defineProperty(b.prototype, "palette", {get:function() {
      for (var a = [], d = this.paletteMatrix()[this.selectedPalIdx], c = 0;c < d.length;c++) {
        a.push(d[c]);
      }
      return a;
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "categoryCount", {get:function() {
      return this._categoryCount;
    }, set:function(a) {
      this._categoryCount = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    b.prototype.paletteMatrix = function() {
      for (var a = [], d = this.categoryCount, c = 0;c < this.sequentialPalettes.length;c++) {
        for (var e = [], b = this.sequentialPalettes[c], g = 0;g < d;g++) {
          var f = g / (d - 1);
          e.push(b(f));
        }
        a.push(e);
      }
      for (c = 0;c < this.divergentPalettes.length;c++) {
        for (var e = [], b = this.divergentPalettes[c][0], k = this.divergentPalettes[c][1], g = 0;g < d;g++) {
          f = g / (d - 1), f = 0.5 >= f ? b(2 * f) : k(2 * (f - 0.5)), e.push(f);
        }
        a.push(e);
      }
      e = [];
      f = 2;
      2 * this.brewerPairedScales.length < d && (f = Math.ceil(d / this.brewerPairedScales.length));
      for (c = 0;c < this.brewerPairedScales.length && e.length < d;c++) {
        for (b = this.brewerPairedScales[c], g = 0;g < f && e.length < d;g++) {
          e.push(b(g / (f - 1)));
        }
      }
      a.push(e);
      return a;
    };
    b.prototype.drawCheckerboxAndTransparencySlider = function(a, d, c) {
      for (var e = d.createImageData(a.width, a.height), b = e.data, g = 0, f = 0;f < a.height;f++) {
        for (var k = 0;k < a.width;k++, g += 4) {
          if (!(f < this.margin || f > a.height - this.margin - 0 - 1 || k < this.margin || k > a.width - this.margin - 1 || (k - this.margin) % (this.w + this.pad) >= this.w)) {
            var m = 0 == Math.floor(k / 5) % 2, n = 0 == Math.floor(f / 5) % 2, h = m && !n || !m && n ? 250 : 200;
            b[g] = h;
            b[g + 1] = h;
            b[g + 2] = h;
            b[g + 3] = 255;
          }
        }
      }
      for (f = g = 0;f < a.height;f++) {
        for (k = 0;k < a.width;k++, g += 4) {
          if (!(f < a.height - this.margin - 14 || f > a.height - this.margin - 1 || k < this.margin || k > a.width - this.margin - 1)) {
            var m = 0 == Math.floor(k / 5) % 2, n = 0 == Math.floor(f / 5) % 2, n = m = h = m && !n || !m && n ? 250 : 200, l = c[this.selectedPalIdx][this.categoryCount - 1].rgb(), p = 1 - (k - this.margin) / (a.width - 2 * this.margin), q = l[1], u = l[2];
            b[g] = l[0] * p + m * (1 - p);
            b[g + 1] = q * p + n * (1 - p);
            b[g + 2] = u * p + h * (1 - p);
            b[g + 3] = 255;
          }
        }
      }
      d.putImageData(e, 0, 0);
    };
    b.prototype.drawPalettes = function(a, d) {
      a.globalAlpha = this.alpha;
      for (var c = 0;c < d.length;c++) {
        for (var b = d[c], l = 0;l < b.length;l++) {
          a.fillStyle = b[l].css(), a.fillRect(this.margin + c * (this.w + this.pad), this.margin + l * this.h, this.w, this.h);
        }
      }
    };
    b.prototype.drawPaletteSelection = function(a) {
      a.globalAlpha = 1;
      a.strokeStyle = "black";
      a.lineWidth = 1.5;
      a.strokeRect(this.margin - 2 + this.selectedPalIdx * (this.w + this.pad), this.margin - 2, this.w + 4, this.h * this.categoryCount + 4);
    };
    b.prototype.drawTransparencySelection = function(a) {
    };
    b.prototype.drawLightnessSelection = function(a) {
    };
    b.prototype.draw = function() {
      this.offset = $("#" + this.paletteCanvasDivID).offset();
      var a = document.getElementById(this.paletteCanvasDivID), d = a.getContext("2d"), c = this.categoryCount, b = this.sequentialPalettes.length + this.divergentPalettes.length + this.qualitativePaletteCount;
      a.width = 2 * this.margin + this.w * b + this.pad * (b - 1);
      a.height = 2 * this.margin + this.h * c + 0;
      a = this.paletteMatrix();
      this.drawPalettes(d, a);
      this.drawPaletteSelection(d);
      this.drawTransparencySelection(d);
      this.drawLightnessSelection(d);
    };
    return b;
  }();
  l.Palette = q;
})(picolor || (picolor = {}));
(function(l) {
  var q = function() {
    function b(a, d) {
      var c = this;
      this._lch = l.whiteToBlackInterpolator(0.4).lch();
      this._alpha = 1;
      this.height = this.width = 298;
      this.radius = 119;
      this.cx = this.width / 2;
      this.cy = this.height / 2;
      d && this.setOptions(d);
      this.containerDivID = a;
      this.colorWheelDivID = this.containerDivID + "-colorwheel";
      var b = '<div style="background-color: #E0E0E0; padding 5px">\t<canvas id="' + this.colorWheelDivID + '"></canvas></div>', t = $("#" + this.containerDivID);
      t.empty();
      t.append(b);
      $("#" + this.colorWheelDivID).mouseleave(this.setWheelDragStateOff.bind(this));
      $("#" + this.colorWheelDivID).mouseup(this.setWheelDragStateOff.bind(this));
      $("#" + this.colorWheelDivID).mousedown(function(a) {
        c.setWheelDragStateOn(a);
        c.setWheelColor(a);
      });
      $("#" + this.colorWheelDivID).mousemove(function(a) {
        c.setCursor(a);
        c.setWheelColor(a);
      });
    }
    b.prototype.setOptions = function(a) {
      a.color && (this._lch = a.color.lch(), this._alpha = a.color.alpha());
    };
    b.prototype.setWheelDragStateOn = function(a) {
      var d = a.pageX - this.offset.left;
      a = a.pageY - this.offset.top;
      var b = d - this.cx, e = a - this.cy;
      Math.sqrt(b * b + e * e) < this.radius && (this.isDraggingColor = !0);
      30 <= a && a <= this.height - 30 && 0 <= d && 18 >= d && (this.isDraggingLightness = !0);
      30 <= a && a <= this.height - 30 && d >= this.width - 19 && d <= this.width && (this.isDraggingAlpha = !0);
    };
    b.prototype.setCursor = function(a) {
      if (!(this.isDraggingAlpha || this.isDraggingColor || this.isDraggingLightness)) {
        var d = a.pageX - this.offset.left;
        a = a.pageY - this.offset.top;
        var b = d - this.cx, e = a - this.cy;
        Math.sqrt(b * b + e * e) < this.radius ? $("#" + this.colorWheelDivID).css("cursor", "crosshair") : 30 <= a && a <= this.height - 30 && 0 <= d && 18 >= d ? $("#" + this.colorWheelDivID).css("cursor", "s-resize") : 30 <= a && a <= this.height - 30 && d >= this.width - 19 && d <= this.width ? $("#" + this.colorWheelDivID).css("cursor", "s-resize") : $("#" + this.colorWheelDivID).css("cursor", "default");
      }
    };
    b.prototype.setWheelColor = function(a) {
      if (this.isDraggingAlpha || this.isDraggingColor || this.isDraggingLightness) {
        var b = a.pageX - this.offset.left;
        a = a.pageY - this.offset.top;
        if (this.isDraggingColor) {
          var c = b - this.cx, e = a - this.cy, b = Math.min(this.radius, Math.sqrt(c * c + e * e)), c = 180 * Math.atan2(e, c) / Math.PI;
          this.lch = [this.lch[0], 100 * b / this.radius, c];
        }
        this.isDraggingLightness && (this.lch = [Math.max(0, Math.min(100, 100 - (a - 30) / (this.height - 60) * 100)), this.lch[1], this.lch[2]]);
        this.isDraggingAlpha && (this.alpha = Math.max(0, Math.min(1, 1 - (a - 30) / (this.height - 60))));
        $("#" + this.containerDivID).trigger("oncolorchange", [this.color]);
      }
    };
    b.prototype.setWheelDragStateOff = function(a) {
      this.isDraggingLightness = this.isDraggingColor = this.isDraggingAlpha = !1;
    };
    Object.defineProperty(b.prototype, "lch", {get:function() {
      return this._lch;
    }, set:function(a) {
      0 > a[2] && (a[2] += 360);
      360 <= a[2] && (a[2] -= 360);
      this._lch = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "hex", {get:function() {
      return chroma.lch(this.lch[0], this.lch[1], this.lch[2]).hex();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "alpha", {get:function() {
      return this._alpha;
    }, set:function(a) {
      this._alpha = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "color", {get:function() {
      var a = chroma.lch(this.lch[0], this.lch[1], this.lch[2]);
      a.alpha(this._alpha);
      return a;
    }, set:function(a) {
      this._lch = a.lch();
      this._alpha = a.alpha();
      this.draw();
    }, enumerable:!0, configurable:!0});
    b.prototype.draw = function() {
      this.offset = $("#" + this.colorWheelDivID).offset();
      var a = document.getElementById(this.colorWheelDivID), b = a.getContext("2d"), c, e, l = Number.MAX_VALUE;
      a.width = this.width;
      a.height = this.height;
      for (var a = b.createImageData(this.width, this.height), g = a.data, f = 0, k = 0;k < this.height;k++) {
        for (var m = 0;m < this.width;m++, f += 4) {
          var n = m - this.cx, h = k - this.cy, q = Math.sqrt(n * n + h * h);
          if (q < this.radius + 0.5) {
            h = 180 * Math.atan2(h, n) / Math.PI;
            0 > h && (h += 360);
            360 < h && (h -= 360);
            var p = 100 * q / this.radius, n = chroma.lch2rgb(this.lch[0], p, h), h = Math.sqrt(Math.pow(p - this.lch[1], 2) + Math.pow(h - this.lch[2], 2));
            h < l && (l = h, c = m, e = k);
            var h = this.alpha, p = n[0], w = n[1], u = n[2], r = 0 == Math.floor(m / 5) % 2, s = 0 == Math.floor(k / 5) % 2, v = r && !s || !r && s ? 250 : 200, s = r = v;
            g[f] = p * h + r * (1 - h);
            g[f + 1] = w * h + s * (1 - h);
            g[f + 2] = u * h + v * (1 - h);
            g[f + 3] = 255 * Math.max(0, this.radius - q);
          }
        }
      }
      for (k = f = 0;k < this.height;k++) {
        for (m = 0;m < this.width;m++, f += 4) {
          30 > k || k > this.height - 30 || 2 > m || 15 < m || (n = chroma.lch2rgb(100 - 100 * (k - 30) / (this.height - 60), this.lch[1], this.lch[2]), g[f] = n[0], g[f + 1] = n[1], g[f + 2] = n[2], g[f + 3] = 255);
        }
      }
      f = 0;
      n = chroma.lch2rgb(this.lch[0], this.lch[1], this.lch[2]);
      for (k = 0;k < this.height;k++) {
        for (m = 0;m < this.width;m++, f += 4) {
          30 > k || k > this.height - 30 || m < this.width - 16 || m > this.width - 3 || (h = 1 - (k - 30) / (this.height - 60), p = n[0], w = n[1], u = n[2], r = 0 == Math.floor(m / 5) % 2, s = 0 == Math.floor(k / 5) % 2, s = r = v = r && !s || !r && s ? 250 : 200, g[f] = p * h + r * (1 - h), g[f + 1] = w * h + s * (1 - h), g[f + 2] = u * h + v * (1 - h), g[f + 3] = 255);
        }
      }
      b.putImageData(a, 0, 0);
      b.beginPath();
      b.lineWidth = 1.5;
      b.strokeStyle = 50 < this.lch[0] ? "#2f2f2f" : "#dfdfdf";
      l = 30 + (100 - this.lch[0]) / 100 * (this.height - 60);
      l = Math.max(37, Math.min(this.height - 30 - 6, l));
      b.arc(9, l, 5, 0, 2 * Math.PI, !1);
      b.stroke();
      b.beginPath();
      0.5 > this.alpha && (b.strokeStyle = "#2f2f2f");
      b.arc(c, e, 6, 0, 2 * Math.PI, !1);
      b.stroke();
      b.beginPath();
      c = Math.min(this.height - 35, 30 + (1 - this.alpha) * (this.height - 60));
      c = Math.max(37, Math.min(this.height - 30 - 6, c));
      b.arc(this.width - 9, c, 5, 0, 2 * Math.PI, !1);
      b.stroke();
    };
    return b;
  }();
  l.ColorWheel = q;
})(picolor || (picolor = {}));


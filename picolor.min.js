var picolor;
(function(l) {
  l.lightSpectrum = [chroma.hex(chroma.brewer.Paired[0]), chroma.hex(chroma.brewer.Paired[2]), chroma.hex(chroma.brewer.Paired[10]), chroma.hex(chroma.brewer.Paired[6]), chroma.hex(chroma.brewer.Paired[4]), chroma.hex(chroma.brewer.Paired[8])];
  l.darkSpectrum = [chroma.hex(chroma.brewer.Paired[1]), chroma.hex(chroma.brewer.Paired[3]), chroma.hex(chroma.brewer.Paired[11]), chroma.hex(chroma.brewer.Paired[7]), chroma.hex(chroma.brewer.Paired[5]), chroma.hex(chroma.brewer.Paired[9])];
  l.whiteToBlackInterpolator = chroma.scale(["white", "black"]).correctLightness(!0);
  var r = function() {
    function b(a, d) {
      this._lch = l.whiteToBlackInterpolator(0.4).lch();
      this._alpha = 1;
      d && this.setOptions(d);
      this.containerDivID = a;
      this.colorBandDivID = this.containerDivID + "-colorband";
      this.blackToWhiteBandDivID = this.containerDivID + "-blacktowhiteband";
      var c = '<div>\t<div id="' + this.colorBandDivID + '-0"></div>\t<div id="' + this.colorBandDivID + '-1"></div>\t<div id="' + this.blackToWhiteBandDivID + '" style="margin-top: 6px"></div></div>', e = $("#" + this.containerDivID);
      e.empty();
      e.append(c);
    }
    b.prototype.setOptions = function(a) {
      a.color && (this._lch = a.color.lch(), this._alpha = a.color.alpha());
    };
    Object.defineProperty(b.prototype, "lch", {get:function() {
      return this._lch;
    }, set:function(a) {
      0 > a[2] && (a[2] += 360);
      360 <= a[2] && (a[2] -= 360);
      this._lch = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "hex", {get:function() {
      return chroma.lch(this.lch[0], this.lch[1], this.lch[2]).hex();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "color", {get:function() {
      var a = chroma.lch(this.lch[0], this.lch[1], this.lch[2]);
      a.alpha(this._alpha);
      return a;
    }, set:function(a) {
      this._lch = a.lch();
      this._alpha = a.alpha();
      this.draw();
    }, enumerable:!0, configurable:!0});
    b.prototype.draw = function() {
      var a = this;
      $("#" + this.containerDivID).off("click");
      for (var d = function(a, d) {
        var c = a.rgb(), e = d.rgb(), h = c[0] - e[0], b = c[1] - e[1], c = c[2] - e[2];
        return Math.sqrt(h * h + b * b + c * c);
      }, c = function(c, e) {
        for (var f = "", h = 0;h < c.length;h++) {
          var b = e + "-" + h, f = f + ('<div id="' + b + '" style="width: 38px;height: 24px;cursor: pointer;display: inline-block;padding: 1px;background-color: #E0E0E0;margin: 0px 4px 0px 4px;'), f = 1 > d(a.color, c[h]) ? f + " border: 2px solid black;" : f + " border: 2px solid #E0E0E0;", f = f + '">', f = f + ('\t<div style="height: 24px; background-color:' + c[h].css() + '"></div>'), f = f + "</div>";
          $("#" + a.containerDivID).on("click", "#" + b, c[h], function(c) {
            a.lch = c.data.lch();
            $("#" + a.containerDivID).trigger("oncolorchange", [a.color]);
          });
        }
        $("#" + e).empty();
        $("#" + e).append(f);
      }, e = [], h = 0;6 > h;h++) {
        e.push(l.whiteToBlackInterpolator(0.2 * h));
      }
      c(l.lightSpectrum, this.colorBandDivID + "-0");
      c(l.darkSpectrum, this.colorBandDivID + "-1");
      c(e, this.blackToWhiteBandDivID);
    };
    return b;
  }();
  l.BasicPicker = r;
})(picolor || (picolor = {}));
(function(l) {
  var r = function() {
    function b(a, d) {
      this.containerDivID = a;
      this._categoryCount = 3;
      this._alpha = 1;
      this.blueRange = [chroma.hex("#deebf7"), chroma.hex("#08306b")];
      this.orangeRange = [chroma.hex("#fee6ce"), chroma.hex("#7f2704")];
      this.greenRange = [chroma.hex("#e5f5e0"), chroma.hex("#00441b")];
      this.grayRange = [chroma.hex("#d9d9d9"), chroma.hex("#000000")];
      this.brownWhiteRange = [chroma.hex("#543005"), chroma.hex("#f5f5f5")];
      this.whiteSeagreenRange = [chroma.hex("#f5f5f5"), chroma.hex("#003c30")];
      this.redYellowRange = [chroma.hex("#a50026"), chroma.hex("#ffffbf")];
      this.yellowPurpleRange = [chroma.hex("#ffffbf"), chroma.hex("#313695")];
      this.qualitativePaletteCount = 1;
      this.brewerPairedRanges = [[chroma.hex(chroma.brewer.Paired[0]), chroma.hex(chroma.brewer.Paired[1])], [chroma.hex(chroma.brewer.Paired[2]), chroma.hex(chroma.brewer.Paired[3])], [chroma.hex(chroma.brewer.Paired[4]), chroma.hex(chroma.brewer.Paired[5])], [chroma.hex(chroma.brewer.Paired[6]), chroma.hex(chroma.brewer.Paired[7])], [chroma.hex(chroma.brewer.Paired[8]), chroma.hex(chroma.brewer.Paired[9])], [chroma.hex(chroma.brewer.Paired[10]), chroma.hex(chroma.brewer.Paired[11])]];
      this.pad = this.margin = 10;
      this.w = this.h = 33;
      this.selectedPalIdx = 0;
      this.isDraggingLightness = !1;
      this.containerDivID = a;
      this.paletteCanvasDivID = this.containerDivID + "-canvas";
      d && this.setOptions(d);
      var c = '<div style="background-color: #E0E0E0; padding 5px; cursor: pointer;">\t<canvas id="' + this.paletteCanvasDivID + '"></canvas></div>', e = $("#" + this.containerDivID);
      e.empty();
      e.append(c);
      $("#" + this.paletteCanvasDivID).click(this.setPalette.bind(this));
    }
    Object.defineProperty(b.prototype, "alpha", {get:function() {
      return this._alpha;
    }, set:function(a) {
      this._alpha = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    b.prototype.generateScale = function(a) {
      return chroma.scale([a[0].hex(), a[1].hex()]).correctLightness(!0);
    };
    Object.defineProperty(b.prototype, "sequentialPalettes", {get:function() {
      var a = this.generateScale(this.blueRange), d = this.generateScale(this.orangeRange), c = this.generateScale(this.greenRange);
      return[this.generateScale(this.grayRange), a, c, d];
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "divergentPalettes", {get:function() {
      chroma.scale([this.brownWhiteRange[0].hex(), this.brownWhiteRange[1].hex()]).correctLightness(!0);
      chroma.scale([this.whiteSeagreenRange[0].hex(), this.whiteSeagreenRange[1].hex()]).correctLightness(!0);
      chroma.scale([this.redYellowRange[0].hex(), this.redYellowRange[1].hex()]).correctLightness(!0);
      chroma.scale([this.yellowPurpleRange[0].hex(), this.yellowPurpleRange[1].hex()]).correctLightness(!0);
      return[[this.generateScale(this.brownWhiteRange), this.generateScale(this.whiteSeagreenRange)], [this.generateScale(this.redYellowRange), this.generateScale(this.yellowPurpleRange)]];
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "brewerPairedScales", {get:function() {
      for (var a = [], d = 0;d < this.brewerPairedRanges.length;d++) {
        var c = this.generateScale(this.brewerPairedRanges[d]);
        a.push(c);
      }
      return a;
    }, enumerable:!0, configurable:!0});
    b.prototype.setPalette = function(a) {
      var d = this.sequentialPalettes.length + this.divergentPalettes.length + this.qualitativePaletteCount;
      this.selectedPalIdx = Math.floor((a.pageX - this.offset.left) / ((2 * this.margin + this.w * d + this.pad * (d - 1)) / d));
      $("#" + this.containerDivID).trigger("oncolorchange", [this.palette]);
      this.draw();
    };
    b.prototype.setOptions = function(a) {
      a.categoryCount && 1 < a.categoryCount && (this._categoryCount = a.categoryCount);
    };
    Object.defineProperty(b.prototype, "palette", {get:function() {
      for (var a = [], d = this.paletteMatrix()[this.selectedPalIdx], c = 0;c < d.length;c++) {
        a.push(d[c]);
      }
      return a;
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "categoryCount", {get:function() {
      return this._categoryCount;
    }, set:function(a) {
      this._categoryCount = a;
      this.draw();
    }, enumerable:!0, configurable:!0});
    b.prototype.paletteMatrix = function() {
      for (var a = [], d = this.categoryCount, c = 0;c < this.sequentialPalettes.length;c++) {
        for (var e = [], h = this.sequentialPalettes[c], g = 0;g < d;g++) {
          var b = g / (d - 1);
          e.push(h(b));
        }
        a.push(e);
      }
      for (c = 0;c < this.divergentPalettes.length;c++) {
        for (var e = [], h = this.divergentPalettes[c][0], f = this.divergentPalettes[c][1], g = 0;g < d;g++) {
          b = g / (d - 1), b = 0.5 >= b ? h(2 * b) : f(2 * (b - 0.5)), e.push(b);
        }
        a.push(e);
      }
      e = [];
      b = 2;
      2 * this.brewerPairedScales.length < d && (b = Math.ceil(d / this.brewerPairedScales.length));
      for (c = 0;c < this.brewerPairedScales.length && e.length < d;c++) {
        for (h = this.brewerPairedScales[c], g = 0;g < b && e.length < d;g++) {
          e.push(h(g / (b - 1)));
        }
      }
      a.push(e);
      return a;
    };
    b.prototype.drawCheckerboxAndTransparencySlider = function(a, d, c) {
      for (var e = d.createImageData(a.width, a.height), b = e.data, g = 0, k = 0;k < a.height;k++) {
        for (var f = 0;f < a.width;f++, g += 4) {
          if (!(k < this.margin || k > a.height - this.margin - 0 - 1 || f < this.margin || f > a.width - this.margin - 1 || (f - this.margin) % (this.w + this.pad) >= this.w)) {
            var l = 0 == Math.floor(f / 5) % 2, n = 0 == Math.floor(k / 5) % 2, q = l && !n || !l && n ? 250 : 200;
            b[g] = q;
            b[g + 1] = q;
            b[g + 2] = q;
            b[g + 3] = 255;
          }
        }
      }
      for (k = g = 0;k < a.height;k++) {
        for (f = 0;f < a.width;f++, g += 4) {
          if (!(k < a.height - this.margin - 14 || k > a.height - this.margin - 1 || f < this.margin || f > a.width - this.margin - 1)) {
            var l = 0 == Math.floor(f / 5) % 2, n = 0 == Math.floor(k / 5) % 2, n = l = q = l && !n || !l && n ? 250 : 200, s = c[this.selectedPalIdx][this.categoryCount - 1].rgb(), m = 1 - (f - this.margin) / (a.width - 2 * this.margin), p = s[1], t = s[2];
            b[g] = s[0] * m + l * (1 - m);
            b[g + 1] = p * m + n * (1 - m);
            b[g + 2] = t * m + q * (1 - m);
            b[g + 3] = 255;
          }
        }
      }
      d.putImageData(e, 0, 0);
    };
    b.prototype.drawPalettes = function(a, d) {
      a.globalAlpha = this.alpha;
      for (var c = 0;c < d.length;c++) {
        for (var e = d[c], b = 0;b < e.length;b++) {
          a.fillStyle = e[b].css(), a.fillRect(this.margin + c * (this.w + this.pad), this.margin + b * this.h, this.w, this.h);
        }
      }
    };
    b.prototype.drawPaletteSelection = function(a) {
      a.globalAlpha = 1;
      a.strokeStyle = "black";
      a.lineWidth = 1.5;
      a.strokeRect(this.margin - 2 + this.selectedPalIdx * (this.w + this.pad), this.margin - 2, this.w + 4, this.h * this.categoryCount + 4);
    };
    b.prototype.drawTransparencySelection = function(a) {
    };
    b.prototype.drawLightnessSelection = function(a) {
    };
    b.prototype.draw = function() {
      this.offset = $("#" + this.paletteCanvasDivID).offset();
      var a = document.getElementById(this.paletteCanvasDivID), d = a.getContext("2d"), c = this.categoryCount, e = this.sequentialPalettes.length + this.divergentPalettes.length + this.qualitativePaletteCount;
      a.width = 2 * this.margin + this.w * e + this.pad * (e - 1);
      a.height = 2 * this.margin + this.h * c + 0;
      a = this.paletteMatrix();
      this.drawPalettes(d, a);
      this.drawPaletteSelection(d);
      this.drawTransparencySelection(d);
      this.drawLightnessSelection(d);
    };
    return b;
  }();
  l.Palette = r;
})(picolor || (picolor = {}));
(function(l) {
  l.lch2rgb = function(b, a, d) {
    var c = function(a) {
      return 0.206893034 < a ? a * a * a : (a - 4 / 29) / 7.787037;
    }, e = function(a) {
      return Math.round(255 * (0.00304 >= a ? 12.92 * a : 1.055 * Math.pow(a, 1 / 2.4) - 0.055));
    }, h = function(a) {
      return Math.max(0, Math.min(255, a));
    }, g = new Uint8Array(3), k = d * Math.PI / 180;
    d = Math.cos(k) * a;
    a *= Math.sin(k);
    b = (b + 16) / 116;
    a = b - a / 200;
    d = 0.95047 * c(b + d / 500);
    b = 1 * c(b);
    a = 1.08883 * c(a);
    g[0] = h(e(3.2404542 * d - 1.5371385 * b - 0.4985314 * a));
    g[1] = h(e(-0.969266 * d + 1.8760108 * b + 0.041556 * a));
    g[2] = h(e(0.0556434 * d - 0.2040259 * b + 1.0572252 * a));
    return g;
  };
  var r = function() {
    function b(a, d) {
      var c = this;
      this._lch = l.whiteToBlackInterpolator(0.4).lch();
      this._alpha = 1;
      this.height = this.width = 298;
      this.radius = 119;
      this.cx = this.width / 2;
      this.cy = this.height / 2;
      d && this.setOptions(d);
      this.containerDivID = a;
      this.colorWheelDivID = this.containerDivID + "-colorwheel";
      var e = '<div style="background-color: #E0E0E0; padding 5px">\t<canvas id="' + this.colorWheelDivID + '"></canvas></div>', b = $("#" + this.containerDivID);
      b.empty();
      b.append(e);
      e = document.getElementById(this.colorWheelDivID);
      e.width = this.width;
      e.height = this.height;
      this.imageDataCache = e.getContext("2d").createImageData(this.width, this.height);
      $("#" + this.colorWheelDivID).mouseleave(this.setWheelDragStateOff.bind(this));
      $("#" + this.colorWheelDivID).mouseup(this.setWheelDragStateOff.bind(this));
      $("#" + this.colorWheelDivID).mousedown(function(a) {
        c.setWheelDragStateOn(a);
        c.setWheelColor(a);
      });
      $("#" + this.colorWheelDivID).mousemove(function(a) {
        c.setCursor(a);
        c.setWheelColor(a);
      });
    }
    b.prototype.setOptions = function(a) {
      a.color && (this._lch = a.color.lch(), this._alpha = a.color.alpha());
    };
    b.prototype.setWheelDragStateOn = function(a) {
      var d = a.pageX - this.offset.left;
      a = a.pageY - this.offset.top;
      var c = d - this.cx, e = a - this.cy;
      Math.sqrt(c * c + e * e) < this.radius && (this.isDraggingColor = !0);
      30 <= a && a <= this.height - 30 && 0 <= d && 18 >= d && (this.isDraggingLightness = !0);
      30 <= a && a <= this.height - 30 && d >= this.width - 19 && d <= this.width && (this.isDraggingAlpha = !0);
    };
    b.prototype.setCursor = function(a) {
      if (!(this.isDraggingAlpha || this.isDraggingColor || this.isDraggingLightness)) {
        var d = a.pageX - this.offset.left;
        a = a.pageY - this.offset.top;
        var c = d - this.cx, e = a - this.cy;
        Math.sqrt(c * c + e * e) < this.radius ? $("#" + this.colorWheelDivID).css("cursor", "crosshair") : 30 <= a && a <= this.height - 30 && 0 <= d && 18 >= d ? $("#" + this.colorWheelDivID).css("cursor", "s-resize") : 30 <= a && a <= this.height - 30 && d >= this.width - 19 && d <= this.width ? $("#" + this.colorWheelDivID).css("cursor", "s-resize") : $("#" + this.colorWheelDivID).css("cursor", "default");
      }
    };
    b.prototype.setWheelColor = function(a) {
      if (this.isDraggingAlpha || this.isDraggingColor || this.isDraggingLightness) {
        var d = a.pageX - this.offset.left;
        a = a.pageY - this.offset.top;
        if (this.isDraggingColor) {
          var c = d - this.cx, e = a - this.cy, b = Math.sqrt(c * c + e * e);
          this.picked_x = d;
          this.picked_y = a;
          if (b > this.radius) {
            var b = this.radius, d = this.radius * e / Math.sqrt(c * c + e * e), g = this.radius * c / Math.sqrt(c * c + e * e);
            this.picked_y = d + this.cy;
            this.picked_x = g + this.cx;
          }
          c = 180 * Math.atan2(e, c) / Math.PI;
          this.lch = [this.lch[0], 100 * b / this.radius, c];
        }
        this.isDraggingLightness && (this.lch = [Math.max(0, Math.min(100, 100 - (a - 30) / (this.height - 60) * 100)), this.lch[1], this.lch[2]]);
        this.isDraggingAlpha && (this.alpha = Math.max(0, Math.min(1, 1 - (a - 30) / (this.height - 60))));
        $("#" + this.containerDivID).trigger("oncolorchange", [this.color]);
      }
    };
    b.prototype.setWheelDragStateOff = function(a) {
      this.isDraggingLightness = this.isDraggingColor = this.isDraggingAlpha = !1;
    };
    Object.defineProperty(b.prototype, "lch", {get:function() {
      return this._lch;
    }, set:function(a) {
      0 > a[2] && (a[2] += 360);
      360 <= a[2] && (a[2] -= 360);
      var d = this._lch[0] != a[0];
      this._lch = a;
      this.draw(d);
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "hex", {get:function() {
      return chroma.lch(this.lch[0], this.lch[1], this.lch[2]).hex();
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "alpha", {get:function() {
      return this._alpha;
    }, set:function(a) {
      this._alpha = a;
      this.draw(!0);
    }, enumerable:!0, configurable:!0});
    Object.defineProperty(b.prototype, "color", {get:function() {
      var a = chroma.lch(this.lch[0], this.lch[1], this.lch[2]);
      a.alpha(this._alpha);
      return a;
    }, set:function(a) {
      var d = a.lch();
      a = a.alpha();
      var c = this._lch[0] != d[0] || this._alpha != a;
      this._lch = d;
      this._alpha = a;
      this.draw(c);
    }, enumerable:!0, configurable:!0});
    b.prototype.draw = function(a) {
      "undefined" === typeof a && (a = !0);
      this.offset = $("#" + this.colorWheelDivID).offset();
      var d = document.getElementById(this.colorWheelDivID).getContext("2d"), c = this.imageDataCache.data, b = 0;
      if (a) {
        a = Number.MAX_VALUE;
        for (var h = 0;h < this.height;h++) {
          for (var g = 0;g < this.width;g++, b += 4) {
            var k = g - this.cx, f = h - this.cy, r = Math.sqrt(k * k + f * f);
            if (r < this.radius + 0.5) {
              f = 180 * Math.atan2(f, k) / Math.PI;
              0 > f && (f += 360);
              360 < f && (f -= 360);
              var n = 100 * r / this.radius, k = l.lch2rgb(this.lch[0], n, f), f = Math.sqrt(Math.pow(n - this.lch[1], 2) + Math.pow(f - this.lch[2], 2));
              f < a && (a = f, this.picked_x = g, this.picked_y = h);
              var f = this.alpha, n = k[0], q = k[1], s = k[2], m = 0 == Math.floor(g / 5) % 2, p = 0 == Math.floor(h / 5) % 2, t = m && !p || !m && p ? 250 : 200, p = m = t;
              c[b] = n * f + m * (1 - f);
              c[b + 1] = q * f + p * (1 - f);
              c[b + 2] = s * f + t * (1 - f);
              c[b + 3] = 255 * Math.max(0, this.radius - r);
            }
          }
        }
      }
      for (h = b = 0;h < this.height;h++) {
        for (g = 0;g < this.width;g++, b += 4) {
          30 > h || h > this.height - 30 || 2 > g || 15 < g || (k = l.lch2rgb(100 - 100 * (h - 30) / (this.height - 60), this.lch[1], this.lch[2]), c[b] = k[0], c[b + 1] = k[1], c[b + 2] = k[2], c[b + 3] = 255);
        }
      }
      b = 0;
      k = l.lch2rgb(this.lch[0], this.lch[1], this.lch[2]);
      for (h = 0;h < this.height;h++) {
        for (g = 0;g < this.width;g++, b += 4) {
          30 > h || h > this.height - 30 || g < this.width - 16 || g > this.width - 3 || (f = 1 - (h - 30) / (this.height - 60), n = k[0], q = k[1], s = k[2], m = 0 == Math.floor(g / 5) % 2, p = 0 == Math.floor(h / 5) % 2, p = m = t = m && !p || !m && p ? 250 : 200, c[b] = n * f + m * (1 - f), c[b + 1] = q * f + p * (1 - f), c[b + 2] = s * f + t * (1 - f), c[b + 3] = 255);
        }
      }
      d.putImageData(this.imageDataCache, 0, 0);
      d.beginPath();
      d.lineWidth = 1.5;
      d.strokeStyle = 50 < this.lch[0] ? "#2f2f2f" : "#dfdfdf";
      c = 30 + (100 - this.lch[0]) / 100 * (this.height - 60);
      c = Math.max(37, Math.min(this.height - 30 - 6, c));
      d.arc(9, c, 5, 0, 2 * Math.PI, !1);
      d.stroke();
      d.beginPath();
      0.5 > this.alpha && (d.strokeStyle = "#2f2f2f");
      d.arc(this.picked_x, this.picked_y, 6, 0, 2 * Math.PI, !1);
      d.stroke();
      d.beginPath();
      c = Math.min(this.height - 35, 30 + (1 - this.alpha) * (this.height - 60));
      c = Math.max(37, Math.min(this.height - 30 - 6, c));
      d.arc(this.width - 9, c, 5, 0, 2 * Math.PI, !1);
      d.stroke();
    };
    return b;
  }();
  l.ColorWheel = r;
})(picolor || (picolor = {}));

